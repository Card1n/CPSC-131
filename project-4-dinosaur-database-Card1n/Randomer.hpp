
#ifndef CPSC131_BST_RANDOMER_HPP
#define CPSC131_BST_RANDOMER_HPP


/**
 * DO NOT EDIT THIS FILE
 */


//
#include <random>
#include <vector>

namespace CPSC131
{

	//
	class Randomer
	{
		public:
			
			Randomer()
			{
				this->generator_ = std::mt19937( this->device_() );
			}
			
			void setSeed(unsigned int seed)
			{
				this->generator_ = std::mt19937(seed);
			}
			
			size_t size_type(size_t min = 1, size_t max = 1000)
			{
				std::uniform_int_distribution<std::mt19937::result_type> dist(min, max);
				
				return dist(this->generator_);
			}
			
			int integer(int min = 1, int max = 1000)
			{
				std::uniform_int_distribution<std::mt19937::result_type> dist(min, max);
				
				return dist(this->generator_);
			}
			
			std::vector<int> integers(size_t count)
			{
				return this->integers(1, 1000, count);
			}
			
			std::vector<int> integers(int min = 1, int max = 1000, size_t count = 25)
			{
				std::vector<int> ints;
				
				for ( size_t i = 0; i < count; i++ ) {
					ints.push_back( this->integer(min, max) );
				}
				
				return ints;
			}
			
			std::mt19937& getGenerator()
			{
				return this->generator_;
			}
			
		
		private:
			
			std::random_device device_;
			std::mt19937 generator_;
	};
}

#endif
