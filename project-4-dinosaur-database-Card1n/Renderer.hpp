#ifndef CPSC131_BST_RENDERER_HPP
#define CPSC131_BST_RENDERER_HPP


/**
 * DO NOT EDIT THIS FILE
 */


//
#include <fstream>
#include <iostream>
#include <string>


//
#include "MyBST.hpp"


//
namespace CPSC131::BST
{
	template<class T>
	class Renderer
	{
		public:
			
			static constexpr const char * DOT_FILENAME = "bst.dot";
			static constexpr const char * PNG_FILENAME = "bst.png";
			
			static void renderBST(const CPSC131::BST::MyBST<T>& bst, std::string file_name = "")
			{
				if ( file_name.empty() ) {
					file_name = Renderer::PNG_FILENAME;
				}
				
				Renderer::renderBstToDot(bst);
				
				//	Ask DOT to render to a PNG with super dumb system call (lel)
				std::string command = "dot";
				command += " -Tpng ";
				command	+= Renderer::DOT_FILENAME;
				command	+= " -o ";
				command += Renderer::PNG_FILENAME;
				
				std::cout << "Rendering graph to: " << Renderer::PNG_FILENAME << "" << std::endl;
				
				auto returnValue = system(command.c_str());
				if ( returnValue != 0 ) {
					std::cerr << "Error: system call failed." << std::endl;
					throw std::runtime_error("Failed to call the 'dot' program");
				}
			}
			
			static void renderBstToDot(const CPSC131::BST::MyBST<T>& bst, std::string file_name = "")
			{
				if ( file_name.empty() ) {
					file_name = Renderer::DOT_FILENAME;
				}
				
				std::string dot = bst.renderToDot();
				
				//	Save the DOT file
				std::ofstream f(
					Renderer::DOT_FILENAME,
					std::ios_base::binary
				);
				f << dot;
				f.close();
			}
		
		private:
			
			
	};
}


#endif
