
/**
 * DO NOT EDIT THIS FILE
 */


//
#include <iostream>


//
#include "MyBST.hpp"
#include "puhp-tests/Random.hpp"


//
using
	std::cout, std::endl
	;


void leaker()
{
	//
	CPSC131::BST::MyBST<int> tree;
	std::vector<int> tree_data;
	PuhPTests::Random r;
	
	//	Build some random numbers
	std::vector<int> random_data;
	for ( size_t i = 0; i < 100000; i++ ) {
		random_data.push_back(r.get(1, 1000000));
	}
	
	//	Insert the random numbers
	std::shuffle(tree_data.begin(), tree_data.end(), r.getGenerator());
	for ( size_t i = 0; i < tree_data.size(); i++ )
	{
		//	Remember which inserts didn't throw
		try
		{
			tree.insert(random_data[i]);
			tree_data.push_back(random_data[i]);
		}
		catch(...) {}
	}
	
	//	Make copies of trees in various ways
	//	and let one of them invoke the DTOR quickly
	CPSC131::BST::MyBST<int> tree2;
	tree2 = tree;
	CPSC131::BST::MyBST<int> tree3 = tree;
	CPSC131::BST::MyBST<int> tree4(tree);
	{
		CPSC131::BST::MyBST<int> tree5 = tree;
	}
	
	//	Check that the numbers exist,
	//	and also some that don't
	std::shuffle(tree_data.begin(), tree_data.end(), r.getGenerator());
	for ( size_t i = 0; i < tree_data.size(); i++ )
	{
		tree.exists(tree_data[i]);
		tree.exists(tree_data[i] + r.get(1, 1000));
	}
	
	//	Find the numbers
	std::shuffle(tree_data.begin(), tree_data.end(), r.getGenerator());
	for ( size_t i = 0; i < tree_data.size(); i++ )
	{
		tree.find(tree_data[i]);
		tree.find_node(tree_data[i]);
	}
	
	//	Remove half of the random numbers
	std::shuffle(tree_data.begin(), tree_data.end(), r.getGenerator());
	for ( size_t i = 0; i < tree_data.size() / 2; i++)
	{
		tree.remove(tree_data[i]);
	}
	
	//	Clear the rest
	tree.clear();
}

//
int main()
{
	//
	cout << "Hello, my name is Niles Peppertrout!" << endl;
	
	//
	leaker();
	
	return 0;
}

