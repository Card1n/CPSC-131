{
   "output": "*************************\n***** Tests Summary *****\n[Node] 22 / 22 ==> 5 / 5\n[BST Easy] 29 / 29 ==> 5 / 5\n[BST Insert] 41 / 41 ==> 10 / 10\n[BST Linear Insert] 161 / 161 ==> 5 / 5\n[BST Node Relations] 63 / 63 ==> 5 / 5\n[BST Topology] 7 / 7 ==> 5 / 5\n[BST Exists] 251 / 251 ==> 5 / 5\n[BST Traversals] 16 / 16 ==> 5 / 5\n[BST Easy Removals] 19 / 19 ==> 5 / 5\n[BST Hard Removals] 19 / 19 ==> 5 / 5\n[BST Clear] 3 / 3 ==> 5 / 5\n[BST Hard Operators] 64 / 64 ==> 5 / 5\n[BST Exceptions] 3 / 3 ==> 5 / 5\n[BST Complexity] 5 / 5 ==> 5 / 5\n[Dino DB] 93 / 93 ==> 5 / 5\n[Memory Leaks] 11 / 11 ==> 5 / 5\n\nRaw Total: 85 / 85 (100%)\nNormalized: 50 / 50\n",
   "score": 50,
   "stdout_visibility": "visible",
   "tests": [
      {
         "max_score": 5,
         "name": "Node",
         "output": "[Node][Info] Setting fixed points possible to 22\n[Node][Info] Running: Checking Node defaults\n[Node][Pass] Points 0 ==> 1 (1): Checking Node defaults :: Award 1 points :: Did not catch exception\n[Node][Info] Running: Checking Node basic set/get\n[Node][Pass] Points 1 ==> 2 (1): Checking Node basic set/get :: Award 1 points :: Did not catch exception\n[Node][Info] Running: Checking Node get/set pointers\n[Node][Pass] Points 2 ==> 3 (1): Checking Node get/set pointers :: Award 1 points :: Did not catch exception\n[Node][Info] Running: Checking Node operators and CTORs\n[Node][Pass] Points 3 ==> 4 (1): Checking Node operators and CTORs :: Award 1 points :: Did not catch exception\n[Node][Info] Running: Node parent should default to nullptr\n[Node][Pass] Points 4 ==> 5 (1): Node parent should default to nullptr :: Award 1 points\n[Node][Info] Running: Node left child should default to nullptr\n[Node][Pass] Points 5 ==> 6 (1): Node left child should default to nullptr :: Award 1 points\n[Node][Info] Running: Node right child should default to nullptr\n[Node][Pass] Points 6 ==> 7 (1): Node right child should default to nullptr :: Award 1 points\n[Node][Info] Running: Node get/set data seems to work\n[Node][Pass] Points 7 ==> 8 (1): Node get/set data seems to work :: Award 1 points\n[Node][Info] Running: Node get/set depth seems to work\n[Node][Pass] Points 8 ==> 9 (1): Node get/set depth seems to work :: Award 1 points :: TRUE\n[Node][Info] Running: Node parent should get/set correctly\n[Node][Pass] Points 9 ==> 10 (1): Node parent should get/set correctly :: Award 1 points\n[Node][Info] Running: Node left child should get/set correctly\n[Node][Pass] Points 10 ==> 11 (1): Node left child should get/set correctly :: Award 1 points\n[Node][Info] Running: Node right child should get/set correctly\n[Node][Pass] Points 11 ==> 12 (1): Node right child should get/set correctly :: Award 1 points\n[Node][Info] Running: Node parent after clear should default be nullptr\n[Node][Pass] Points 12 ==> 13 (1): Node parent after clear should default be nullptr :: Award 1 points\n[Node][Info] Running: Node left child after clear should default be nullptr\n[Node][Pass] Points 13 ==> 14 (1): Node left child after clear should default be nullptr :: Award 1 points\n[Node][Info] Running: Node right child after clear should default be nullptr\n[Node][Pass] Points 14 ==> 15 (1): Node right child after clear should default be nullptr :: Award 1 points\n[Node][Info] Running: Check dereferencing operator\n[Node][Pass] Points 15 ==> 16 (1): Check dereferencing operator :: Award 1 points\n[Node][Info] Running: Check dereferencing operator\n[Node][Pass] Points 16 ==> 17 (1): Check dereferencing operator :: Award 1 points\n[Node][Info] Running: Check node equality operator\n[Node][Pass] Points 17 ==> 18 (1): Check node equality operator :: Award 1 points :: TRUE\n[Node][Info] Running: Check node inequality operator\n[Node][Pass] Points 18 ==> 19 (1): Check node inequality operator :: Award 1 points :: TRUE\n[Node][Info] Running: Check assignment operator after declaration\n[Node][Pass] Points 19 ==> 20 (1): Check assignment operator after declaration :: Award 1 points :: TRUE\n[Node][Info] Running: Check assignment operator during declaration (Copy CTOR)\n[Node][Pass] Points 20 ==> 21 (1): Check assignment operator during declaration (Copy CTOR) :: Award 1 points :: TRUE\n[Node][Info] Running: Check explicit copy CTOR\n[Node][Pass] Points 21 ==> 22 (1): Check explicit copy CTOR :: Award 1 points :: TRUE\n",
         "score": 5
      },
      {
         "max_score": 5,
         "name": "BST Easy",
         "output": "[BST Easy][Info] Setting fixed points possible to 29\n[BST Easy][Info] Running: Checking empty tree\n[BST Easy][Pass] Points 0 ==> 1 (1): Checking empty tree :: Award 1 points :: Did not catch exception\n[BST Easy][Info] Running: Checking a single node tree\n[BST Easy][Pass] Points 1 ==> 2 (1): Checking a single node tree :: Award 1 points :: Did not catch exception\n[BST Easy][Info] Running: Empty tree should know it's empty\n[BST Easy][Pass] Points 2 ==> 3 (1): Empty tree should know it's empty :: Award 1 points :: TRUE\n[BST Easy][Info] Running: Empty tree should think its size is 0\n[BST Easy][Pass] Points 3 ==> 4 (1): Empty tree should think its size is 0 :: Award 1 points\n[BST Easy][Info] Running: Empty tree should think its height is 0\n[BST Easy][Pass] Points 4 ==> 5 (1): Empty tree should think its height is 0 :: Award 1 points\n[BST Easy][Info] Running: Single node tree should know it's not empty\n[BST Easy][Pass] Points 5 ==> 6 (1): Single node tree should know it's not empty :: Award 1 points :: FALSE\n[BST Easy][Info] Running: Single node tree should know its size is 1\n[BST Easy][Pass] Points 6 ==> 7 (1): Single node tree should know its size is 1 :: Award 1 points\n[BST Easy][Info] Running: Single node tree should know its height is 1\n[BST Easy][Pass] Points 7 ==> 8 (1): Single node tree should know its height is 1 :: Award 1 points\n[BST Easy][Info] Running: Single node tree should not have a null root\n[BST Easy][Pass] Points 8 ==> 9 (1): Single node tree should not have a null root :: Award 1 points\n[BST Easy][Info] Running: Check root's data in a single node tree\n[BST Easy][Pass] Points 9 ==> 10 (1): Check root's data in a single node tree :: Award 1 points\n[BST Easy][Info] Running: Check root's depth in a single node tree\n[BST Easy][Pass] Points 10 ==> 11 (1): Check root's depth in a single node tree :: Award 1 points\n[BST Easy][Info] Running: Root node should think it is the root node\n[BST Easy][Pass] Points 11 ==> 12 (1): Root node should think it is the root node :: Award 1 points :: TRUE\n[BST Easy][Info] Running: Single node tree should have null left child\n[BST Easy][Pass] Points 12 ==> 13 (1): Single node tree should have null left child :: Award 1 points\n[BST Easy][Info] Running: Single node tree should have null right child\n[BST Easy][Pass] Points 13 ==> 14 (1): Single node tree should have null right child :: Award 1 points\n[BST Easy][Info] Running: [Single Node Tree] Assignment after declaration; Trees should be equal\n[BST Easy][Pass] Points 14 ==> 15 (1): [Single Node Tree] Assignment after declaration; Trees should be equal :: Award 1 points :: TRUE\n[BST Easy][Info] Running: [Single Node Tree] Assignment after declaration; Trees should not be unequal\n[BST Easy][Pass] Points 15 ==> 16 (1): [Single Node Tree] Assignment after declaration; Trees should not be unequal :: Award 1 points :: FALSE\n[BST Easy][Info] Running: [Single Node Tree] Assignment after declaration; Trees should be not be equal after altering second tree\n[BST Easy][Pass] Points 16 ==> 17 (1): [Single Node Tree] Assignment after declaration; Trees should be not be equal after altering second tree :: Award 1 points :: FALSE\n[BST Easy][Info] Running: [Single Node Tree] Assignment after declaration; Trees should be unequal after altering second tree\n[BST Easy][Pass] Points 17 ==> 18 (1): [Single Node Tree] Assignment after declaration; Trees should be unequal after altering second tree :: Award 1 points :: TRUE\n[BST Easy][Info] Running: [Single Node Tree] Copy CTOR; Trees should be equal\n[BST Easy][Pass] Points 18 ==> 19 (1): [Single Node Tree] Copy CTOR; Trees should be equal :: Award 1 points :: TRUE\n[BST Easy][Info] Running: [Single Node Tree] Copy CTOR; Trees should not be unequal\n[BST Easy][Pass] Points 19 ==> 20 (1): [Single Node Tree] Copy CTOR; Trees should not be unequal :: Award 1 points :: FALSE\n[BST Easy][Info] Running: [Single Node Tree] Copy CTOR; Trees should be not be equal after altering second tree (ptr stealing?)\n[BST Easy][Pass] Points 20 ==> 21 (1): [Single Node Tree] Copy CTOR; Trees should be not be equal after altering second tree (ptr stealing?) :: Award 1 points :: FALSE\n[BST Easy][Info] Running: [Single Node Tree] Copy CTOR; Trees should be unequal after altering second tree (ptr stealing?)\n[BST Easy][Pass] Points 21 ==> 22 (1): [Single Node Tree] Copy CTOR; Trees should be unequal after altering second tree (ptr stealing?) :: Award 1 points :: TRUE\n[BST Easy][Info] Running: [Single Node Tree] Assignment during declaration (Copy CTOR); Trees should be equal\n[BST Easy][Pass] Points 22 ==> 23 (1): [Single Node Tree] Assignment during declaration (Copy CTOR); Trees should be equal :: Award 1 points :: TRUE\n[BST Easy][Info] Running: [Single Node Tree] Assignment during declaration (Copy CTOR); Trees should not be unequal\n[BST Easy][Pass] Points 23 ==> 24 (1): [Single Node Tree] Assignment during declaration (Copy CTOR); Trees should not be unequal :: Award 1 points :: FALSE\n[BST Easy][Info] Running: [Single Node Tree] Assignment during declaration (Copy CTOR); Trees should be not be equal after altering assigned tree\n[BST Easy][Pass] Points 24 ==> 25 (1): [Single Node Tree] Assignment during declaration (Copy CTOR); Trees should be not be equal after altering assigned tree :: Award 1 points :: FALSE\n[BST Easy][Info] Running: [Single Node Tree] Assignment during declaration (Copy CTOR); Trees should be unequal after altering assigned tree\n[BST Easy][Pass] Points 25 ==> 26 (1): [Single Node Tree] Assignment during declaration (Copy CTOR); Trees should be unequal after altering assigned tree :: Award 1 points :: TRUE\n[BST Easy][Info] Running: Single node tree should have null root after clear()\n[BST Easy][Pass] Points 26 ==> 27 (1): Single node tree should have null root after clear() :: Award 1 points\n[BST Easy][Info] Running: Single node tree should think it's empty after clear()\n[BST Easy][Pass] Points 27 ==> 28 (1): Single node tree should think it's empty after clear() :: Award 1 points :: TRUE\n[BST Easy][Info] Running: Single node tree should have size=0 after clear()\n[BST Easy][Pass] Points 28 ==> 29 (1): Single node tree should have size=0 after clear() :: Award 1 points\n",
         "score": 5
      },
      {
         "max_score": 10,
         "name": "BST Insert",
         "output": "[BST Insert][Info] Setting fixed points possible to 41\n[BST Insert][Info] Running: Inserting small (3) tree\n[BST Insert][Pass] Points 0 ==> 1 (1): Inserting small (3) tree :: Award 1 points :: Did not catch exception\n[BST Insert][Info] Running: Inserting random tree\n[BST Insert][Pass] Points 1 ==> 2 (1): Inserting random tree :: Award 1 points :: Did not catch exception\n[BST Insert][Info] Running: Small (3) tree should not think it's empty\n[BST Insert][Pass] Points 2 ==> 3 (1): Small (3) tree should not think it's empty :: Award 1 points :: FALSE\n[BST Insert][Info] Running: Small (3) tree of 3 nodes should think its size is 3\n[BST Insert][Pass] Points 3 ==> 4 (1): Small (3) tree of 3 nodes should think its size is 3 :: Award 1 points\n[BST Insert][Info] Running: Small (3) balanced tree of 3 nodes should have height of 2\n[BST Insert][Pass] Points 4 ==> 5 (1): Small (3) balanced tree of 3 nodes should have height of 2 :: Award 1 points\n[BST Insert][Info] Running: Check small (3) tree root node knows it is parentless :(\n[BST Insert][Pass] Points 5 ==> 6 (1): Check small (3) tree root node knows it is parentless :( :: Award 1 points :: FALSE\n[BST Insert][Info] Running: Small (3) tree's root node should think it is the root node\n[BST Insert][Pass] Points 6 ==> 7 (1): Small (3) tree's root node should think it is the root node :: Award 1 points :: TRUE\n[BST Insert][Info] Running: Check small (3) tree root node knows it has a left child\n[BST Insert][Pass] Points 7 ==> 8 (1): Check small (3) tree root node knows it has a left child :: Award 1 points :: TRUE\n[BST Insert][Info] Running: Check small (3) tree root node knows it has a right child\n[BST Insert][Pass] Points 8 ==> 9 (1): Check small (3) tree root node knows it has a right child :: Award 1 points :: TRUE\n[BST Insert][Info] Running: Check small (3) tree left node knows it has a parent\n[BST Insert][Pass] Points 9 ==> 10 (1): Check small (3) tree left node knows it has a parent :: Award 1 points :: TRUE\n[BST Insert][Info] Running: Check small (3) tree left node knows it has no left child\n[BST Insert][Pass] Points 10 ==> 11 (1): Check small (3) tree left node knows it has no left child :: Award 1 points :: FALSE\n[BST Insert][Info] Running: Check small (3) tree left node knows it has no right child\n[BST Insert][Pass] Points 11 ==> 12 (1): Check small (3) tree left node knows it has no right child :: Award 1 points :: FALSE\n[BST Insert][Info] Running: Check small (3) tree right node knows it has a parent\n[BST Insert][Pass] Points 12 ==> 13 (1): Check small (3) tree right node knows it has a parent :: Award 1 points :: TRUE\n[BST Insert][Info] Running: Check small (3) tree right node knows it has no left child\n[BST Insert][Pass] Points 13 ==> 14 (1): Check small (3) tree right node knows it has no left child :: Award 1 points :: FALSE\n[BST Insert][Info] Running: Check small (3) tree right node knows it has no right child\n[BST Insert][Pass] Points 14 ==> 15 (1): Check small (3) tree right node knows it has no right child :: Award 1 points :: FALSE\n[BST Insert][Info] Running: Check small (3) tree root value\n[BST Insert][Pass] Points 15 ==> 16 (1): Check small (3) tree root value :: Award 1 points\n[BST Insert][Info] Running: Check small (3) tree left node value\n[BST Insert][Pass] Points 16 ==> 17 (1): Check small (3) tree left node value :: Award 1 points\n[BST Insert][Info] Running: Check small (3) tree right node value\n[BST Insert][Pass] Points 17 ==> 18 (1): Check small (3) tree right node value :: Award 1 points\n[BST Insert][Info] Running: Check small (3) tree root depth\n[BST Insert][Pass] Points 18 ==> 19 (1): Check small (3) tree root depth :: Award 1 points\n[BST Insert][Info] Running: Check small (3) tree left node depth\n[BST Insert][Pass] Points 19 ==> 20 (1): Check small (3) tree left node depth :: Award 1 points\n[BST Insert][Info] Running: Check small (3) tree right node depth\n[BST Insert][Pass] Points 20 ==> 21 (1): Check small (3) tree right node depth :: Award 1 points\n[BST Insert][Info] Running: Small tree should not think it's empty\n[BST Insert][Pass] Points 21 ==> 22 (1): Small tree should not think it's empty :: Award 1 points :: FALSE\n[BST Insert][Info] Running: Small tree should know its size\n[BST Insert][Pass] Points 22 ==> 23 (1): Small tree should know its size :: Award 1 points\n[BST Insert][Info] Running: Root node should think it is the root node\n[BST Insert][Pass] Points 23 ==> 24 (1): Root node should think it is the root node :: Award 1 points :: TRUE\n[BST Insert][Info] Running: Random tree should appear to be ordered correctly (depends on in-order traversal)\n[BST Insert][Pass] Points 24 ==> 25 (1): Random tree should appear to be ordered correctly (depends on in-order traversal) :: Award 1 points :: TRUE\n[BST Insert][Info] Running: Small tree should not think it's empty\n[BST Insert][Pass] Points 25 ==> 26 (1): Small tree should not think it's empty :: Award 1 points :: FALSE\n[BST Insert][Info] Running: Small tree should know its size\n[BST Insert][Pass] Points 26 ==> 27 (1): Small tree should know its size :: Award 1 points\n[BST Insert][Info] Running: Root node should think it is the root node\n[BST Insert][Pass] Points 27 ==> 28 (1): Root node should think it is the root node :: Award 1 points :: TRUE\n[BST Insert][Info] Running: Random tree should appear to be ordered correctly (depends on in-order traversal)\n[BST Insert][Pass] Points 28 ==> 29 (1): Random tree should appear to be ordered correctly (depends on in-order traversal) :: Award 1 points :: TRUE\n[BST Insert][Info] Running: Small tree should not think it's empty\n[BST Insert][Pass] Points 29 ==> 30 (1): Small tree should not think it's empty :: Award 1 points :: FALSE\n[BST Insert][Info] Running: Small tree should know its size\n[BST Insert][Pass] Points 30 ==> 31 (1): Small tree should know its size :: Award 1 points\n[BST Insert][Info] Running: Root node should think it is the root node\n[BST Insert][Pass] Points 31 ==> 32 (1): Root node should think it is the root node :: Award 1 points :: TRUE\n[BST Insert][Info] Running: Random tree should appear to be ordered correctly (depends on in-order traversal)\n[BST Insert][Pass] Points 32 ==> 33 (1): Random tree should appear to be ordered correctly (depends on in-order traversal) :: Award 1 points :: TRUE\n[BST Insert][Info] Running: Small tree should not think it's empty\n[BST Insert][Pass] Points 33 ==> 34 (1): Small tree should not think it's empty :: Award 1 points :: FALSE\n[BST Insert][Info] Running: Small tree should know its size\n[BST Insert][Pass] Points 34 ==> 35 (1): Small tree should know its size :: Award 1 points\n[BST Insert][Info] Running: Root node should think it is the root node\n[BST Insert][Pass] Points 35 ==> 36 (1): Root node should think it is the root node :: Award 1 points :: TRUE\n[BST Insert][Info] Running: Random tree should appear to be ordered correctly (depends on in-order traversal)\n[BST Insert][Pass] Points 36 ==> 37 (1): Random tree should appear to be ordered correctly (depends on in-order traversal) :: Award 1 points :: TRUE\n[BST Insert][Info] Running: Small tree should not think it's empty\n[BST Insert][Pass] Points 37 ==> 38 (1): Small tree should not think it's empty :: Award 1 points :: FALSE\n[BST Insert][Info] Running: Small tree should know its size\n[BST Insert][Pass] Points 38 ==> 39 (1): Small tree should know its size :: Award 1 points\n[BST Insert][Info] Running: Root node should think it is the root node\n[BST Insert][Pass] Points 39 ==> 40 (1): Root node should think it is the root node :: Award 1 points :: TRUE\n[BST Insert][Info] Running: Random tree should appear to be ordered correctly (depends on in-order traversal)\n[BST Insert][Pass] Points 40 ==> 41 (1): Random tree should appear to be ordered correctly (depends on in-order traversal) :: Award 1 points :: TRUE\n",
         "score": 10
      },
      {
         "max_score": 5,
         "name": "BST Linear Insert",
         "output": "[BST Linear Insert][Info] Setting fixed points possible to 161\n[BST Linear Insert][Info] Running: Straight line (slow) trees\n[BST Linear Insert][Pass] Points 0 ==> 1 (1): Straight line (slow) trees :: Award 1 points :: Did not catch exception\n[BST Linear Insert][Info] Running: Left-leaning linear tree; size should appear correct\n[BST Linear Insert][Pass] Points 1 ==> 2 (1): Left-leaning linear tree; size should appear correct :: Award 1 points\n[BST Linear Insert][Info] Running: Left-leaning linear tree; ordering should be correct\n[BST Linear Insert][Pass] Points 2 ==> 3 (1): Left-leaning linear tree; ordering should be correct :: Award 1 points :: TRUE\n[BST Linear Insert][Info] Running: Left-leaning linear tree; height should be correct\n[BST Linear Insert][Pass] Points 3 ==> 4 (1): Left-leaning linear tree; height should be correct :: Award 1 points\n[BST Linear Insert][Info] Running: Left-leaning linear tree; checked for valid node data and depth\n[BST Linear Insert][Pass] Points 4 ==> 5 (1): Left-leaning linear tree; checked for valid node data and depth :: Award 1 points :: TRUE\n[BST Linear Insert][Info] Running: Right-leaning linear tree; size should appear correct\n[BST Linear Insert][Pass] Points 5 ==> 6 (1): Right-leaning linear tree; size should appear correct :: Award 1 points\n[BST Linear Insert][Info] Running: Right-leaning linear tree; ordering should be correct\n[BST Linear Insert][Pass] Points 6 ==> 7 (1): Right-leaning linear tree; ordering should be correct :: Award 1 points :: TRUE\n[BST Linear Insert][Info] Running: Right-leaning linear tree; height should be correct\n[BST Linear Insert][Pass] Points 7 ==> 8 (1): Right-leaning linear tree; height should be correct :: Award 1 points\n[BST Linear Insert][Info] Running: Right-leaning linear tree; checked for valid node data and depth\n[BST Linear Insert][Pass] Points 8 ==> 9 (1): Right-leaning linear tree; checked for valid node data and depth :: Award 1 points :: TRUE\n[BST Linear Insert][Info] Running: [Left-leaning linear tree] Assignment after declaration; Trees should be equal\n[BST Linear Insert][Pass] Points 9 ==> 10 (1): [Left-leaning linear tree] Assignment after declaration; Trees should be equal :: Award 1 points :: TRUE\n[BST Linear Insert][Info] Running: [Left-leaning linear tree] Assignment after declaration; Trees should not be unequal\n[BST Linear Insert][Pass] Points 10 ==> 11 (1): [Left-leaning linear tree] Assignment after declaration; Trees should not be unequal :: Award 1 points :: FALSE\n[BST Linear Insert][Info] Running: [Left-leaning linear tree] Assignment after declaration; Trees should be not be equal after altering second tree\n[BST Linear Insert][Pass] Points 11 ==> 12 (1): [Left-leaning linear tree] Assignment after declaration; Trees should be not be equal after altering second tree :: Award 1 points :: FALSE\n[BST Linear Insert][Info] Running: [Left-leaning linear tree] Assignment after declaration; Trees should be unequal after altering second tree\n[BST Linear Insert][Pass] Points 12 ==> 13 (1): [Left-leaning linear tree] Assignment after declaration; Trees should be unequal after altering second tree :: Award 1 points :: TRUE\n[BST Linear Insert][Info] Running: [Left-leaning linear tree] Copy CTOR; Trees should be equal\n[BST Linear Insert][Pass] Points 13 ==> 14 (1): [Left-leaning linear tree] Copy CTOR; Trees should be equal :: Award 1 points :: TRUE\n[BST Linear Insert][Info] Running: [Left-leaning linear tree] Copy CTOR; Trees should not be unequal\n[BST Linear Insert][Pass] Points 14 ==> 15 (1): [Left-leaning linear tree] Copy CTOR; Trees should not be unequal :: Award 1 points :: FALSE\n[BST Linear Insert][Info] Running: [Left-leaning linear tree] Copy CTOR; Trees should be not be equal after altering second tree (ptr stealing?)\n[BST Linear Insert][Pass] Points 15 ==> 16 (1): [Left-leaning linear tree] Copy CTOR; Trees should be not be equal after altering second tree (ptr stealing?) :: Award 1 points :: FALSE\n[BST Linear Insert][Info] Running: [Left-leaning linear tree] Copy CTOR; Trees should be unequal after altering second tree (ptr stealing?)\n[BST Linear Insert][Pass] Points 16 ==> 17 (1): [Left-leaning linear tree] Copy CTOR; Trees should be unequal after altering second tree (ptr stealing?) :: Award 1 points :: TRUE\n[BST Linear Insert][Info] Running: [Left-leaning linear tree] Assignment during declaration (Copy CTOR); Trees should be equal\n[BST Linear Insert][Pass] Points 17 ==> 18 (1): [Left-leaning linear tree] Assignment during declaration (Copy CTOR); Trees should be equal :: Award 1 points :: TRUE\n[BST Linear Insert][Info] Running: [Left-leaning linear tree] Assignment during declaration (Copy CTOR); Trees should not be unequal\n[BST Linear Insert][Pass] Points 18 ==> 19 (1): [Left-leaning linear tree] Assignment during declaration (Copy CTOR); Trees should not be unequal :: Award 1 points :: FALSE\n[BST Linear Insert][Info] Running: [Left-leaning linear tree] Assignment during declaration (Copy CTOR); Trees should be not be equal after altering assigned tree\n[BST Linear Insert][Pass] Points 19 ==> 20 (1): [Left-leaning linear tree] Assignment during declaration (Copy CTOR); Trees should be not be equal after altering assigned tree :: Award 1 points :: FALSE\n[BST Linear Insert][Info] Running: [Left-leaning linear tree] Assignment during declaration (Copy CTOR); Trees should be unequal after altering assigned tree\n[BST Linear Insert][Pass] Points 20 ==> 21 (1): [Left-leaning linear tree] Assignment during declaration (Copy CTOR); Trees should be unequal after altering assigned tree :: Award 1 points :: TRUE\n[BST Linear Insert][Info] Running: [Right-leaning linear tree] Assignment after declaration; Trees should be equal\n[BST Linear Insert][Pass] Points 21 ==> 22 (1): [Right-leaning linear tree] Assignment after declaration; Trees should be equal :: Award 1 points :: TRUE\n[BST Linear Insert][Info] Running: [Right-leaning linear tree] Assignment after declaration; Trees should not be unequal\n[BST Linear Insert][Pass] Points 22 ==> 23 (1): [Right-leaning linear tree] Assignment after declaration; Trees should not be unequal :: Award 1 points :: FALSE\n[BST Linear Insert][Info] Running: [Right-leaning linear tree] Assignment after declaration; Trees should be not be equal after altering second tree\n[BST Linear Insert][Pass] Points 23 ==> 24 (1): [Right-leaning linear tree] Assignment after declaration; Trees should be not be equal after altering second tree :: Award 1 points :: FALSE\n[BST Linear Insert][Info] Running: [Right-leaning linear tree] Assignment after declaration; Trees should be unequal after altering second tree\n[BST Linear Insert][Pass] Points 24 ==> 25 (1): [Right-leaning linear tree] Assignment after declaration; Trees should be unequal after altering second tree :: Award 1 points :: TRUE\n[BST Linear Insert][Info] Running: [Right-leaning linear tree] Copy CTOR; Trees should be equal\n[BST Linear Insert][Pass] Points 25 ==> 26 (1): [Right-leaning linear tree] Copy CTOR; Trees should be equal :: Award 1 points :: TRUE\n[BST Linear Insert][Info] Running: [Right-leaning linear tree] Copy CTOR; Trees should not be unequal\n[BST Linear Insert][Pass] Points 26 ==> 27 (1): [Right-leaning linear tree] Copy CTOR; Trees should not be unequal :: Award 1 points :: FALSE\n[BST Linear Insert][Info] Running: [Right-leaning linear tree] Copy CTOR; Trees should be not be equal after altering second tree (ptr stealing?)\n[BST Linear Insert][Pass] Points 27 ==> 28 (1): [Right-leaning linear tree] Copy CTOR; Trees should be not be equal after altering second tree (ptr stealing?) :: Award 1 points :: FALSE\n[BST Linear Insert][Info] Running: [Right-leaning linear tree] Copy CTOR; Trees should be unequal after altering second tree (ptr stealing?)\n[BST Linear Insert][Pass] Points 28 ==> 29 (1): [Right-leaning linear tree] Copy CTOR; Trees should be unequal after altering second tree (ptr stealing?) :: Award 1 points :: TRUE\n[BST Linear Insert][Info] Running: [Right-leaning linear tree] Assignment during declaration (Copy CTOR); Trees should be equal\n[BST Linear Insert][Pass] Points 29 ==> 30 (1): [Right-leaning linear tree] Assignment during declaration (Copy CTOR); Trees should be equal :: Award 1 points :: TRUE\n[BST Linear Insert][Info] Running: [Right-leaning linear tree] Assignment during declaration (Copy CTOR); Trees should not be unequal\n[BST Linear Insert][Pass] Points 30 ==> 31 (1): [Right-leaning linear tree] Assignment during declaration (Copy CTOR); Trees should not be unequal :: Award 1 points :: FALSE\n[BST Linear Insert][Info] Running: [Right-leaning linear tree] Assignment during declaration (Copy CTOR); Trees should be not be equal after altering assigned tree\n[BST Linear Insert][Pass] Points 31 ==> 32 (1): [Right-leaning linear tree] Assignment during declaration (Copy CTOR); Trees should be not be equal after altering assigned tree :: Award 1 points :: FALSE\n[BST Linear Insert][Info] Running: [Right-leaning linear tree] Assignment during declaration (Copy CTOR); Trees should be unequal after altering assigned tree\n[BST Linear Insert][Pass] Points 32 ==> 33 (1): [Right-leaning linear tree] Assignment during declaration (Copy CTOR); Trees should be unequal after altering assigned tree :: Award 1 points :: TRUE\n[BST Linear Insert][Info] Running: Left-leaning linear tree; size should appear correct\n[BST Linear Insert][Pass] Points 33 ==> 34 (1): Left-leaning linear tree; size should appear correct :: Award 1 points\n[BST Linear Insert][Info] Running: Left-leaning linear tree; ordering should be correct\n[BST Linear Insert][Pass] Points 34 ==> 35 (1): Left-leaning linear tree; ordering should be correct :: Award 1 points :: TRUE\n[BST Linear Insert][Info] Running: Left-leaning linear tree; height should be correct\n[BST Linear Insert][Pass] Points 35 ==> 36 (1): Left-leaning linear tree; height should be correct :: Award 1 points\n[BST Linear Insert][Info] Running: Left-leaning linear tree; checked for valid node data and depth\n[BST Linear Insert][Pass] Points 36 ==> 37 (1): Left-leaning linear tree; checked for valid node data and depth :: Award 1 points :: TRUE\n[BST Linear Insert][Info] Running: Right-leaning linear tree; size should appear correct\n[BST Linear Insert][Pass] Points 37 ==> 38 (1): Right-leaning linear tree; size should appear correct :: Award 1 points\n[BST Linear Insert][Info] Running: Right-leaning linear tree; ordering should be correct\n[BST Linear Insert][Pass] Points 38 ==> 39 (1): Right-leaning linear tree; ordering should be correct :: Award 1 points :: TRUE\n[BST Linear Insert][Info] Running: Right-leaning linear tree; height should be correct\n[BST Linear Insert][Pass] Points 39 ==> 40 (1): Right-leaning linear tree; height should be correct :: Award 1 points\n[BST Linear Insert][Info] Running: Right-leaning linear tree; checked for valid node data and depth\n[BST Linear Insert][Pass] Points 40 ==> 41 (1): Right-leaning linear tree; checked for valid node data and depth :: Award 1 points :: TRUE\n[BST Linear Insert][Info] Running: [Left-leaning linear tree] Assignment after declaration; Trees should be equal\n[BST Linear Insert][Pass] Points 41 ==> 42 (1): [Left-leaning linear tree] Assignment after declaration; Trees should be equal :: Award 1 points :: TRUE\n[BST Linear Insert][Info] Running: [Left-leaning linear tree] Assignment after declaration; Trees should not be unequal\n[BST Linear Insert][Pass] Points 42 ==> 43 (1): [Left-leaning linear tree] Assignment after declaration; Trees should not be unequal :: Award 1 points :: FALSE\n[BST Linear Insert][Info] Running: [Left-leaning linear tree] Assignment after declaration; Trees should be not be equal after altering second tree\n[BST Linear Insert][Pass] Points 43 ==> 44 (1): [Left-leaning linear tree] Assignment after declaration; Trees should be not be equal after altering second tree :: Award 1 points :: FALSE\n[BST Linear Insert][Info] Running: [Left-leaning linear tree] Assignment after declaration; Trees should be unequal after altering second tree\n[BST Linear Insert][Pass] Points 44 ==> 45 (1): [Left-leaning linear tree] Assignment after declaration; Trees should be unequal after altering second tree :: Award 1 points :: TRUE\n[BST Linear Insert][Info] Running: [Left-leaning linear tree] Copy CTOR; Trees should be equal\n[BST Linear Insert][Pass] Points 45 ==> 46 (1): [Left-leaning linear tree] Copy CTOR; Trees should be equal :: Award 1 points :: TRUE\n[BST Linear Insert][Info] Running: [Left-leaning linear tree] Copy CTOR; Trees should not be unequal\n[BST Linear Insert][Pass] Points 46 ==> 47 (1): [Left-leaning linear tree] Copy CTOR; Trees should not be unequal :: Award 1 points :: FALSE\n[BST Linear Insert][Info] Running: [Left-leaning linear tree] Copy CTOR; Trees should be not be equal after altering second tree (ptr stealing?)\n[BST Linear Insert][Pass] Points 47 ==> 48 (1): [Left-leaning linear tree] Copy CTOR; Trees should be not be equal after altering second tree (ptr stealing?) :: Award 1 points :: FALSE\n[BST Linear Insert][Info] Running: [Left-leaning linear tree] Copy CTOR; Trees should be unequal after altering second tree (ptr stealing?)\n[BST Linear Insert][Pass] Points 48 ==> 49 (1): [Left-leaning linear tree] Copy CTOR; Trees should be unequal after altering second tree (ptr stealing?) :: Award 1 points :: TRUE\n[BST Linear Insert][Info] Running: [Left-leaning linear tree] Assignment during declaration (Copy CTOR); Trees should be equal\n[BST Linear Insert][Pass] Points 49 ==> 50 (1): [Left-leaning linear tree] Assignment during declaration (Copy CTOR); Trees should be equal :: Award 1 points :: TRUE\n[BST Linear Insert][Info] Running: [Left-leaning linear tree] Assignment during declaration (Copy CTOR); Trees should not be unequal\n[BST Linear Insert][Pass] Points 50 ==> 51 (1): [Left-leaning linear tree] Assignment during declaration (Copy CTOR); Trees should not be unequal :: Award 1 points :: FALSE\n[BST Linear Insert][Info] Running: [Left-leaning linear tree] Assignment during declaration (Copy CTOR); Trees should be not be equal after altering assigned tree\n[BST Linear Insert][Pass] Points 51 ==> 52 (1): [Left-leaning linear tree] Assignment during declaration (Copy CTOR); Trees should be not be equal after altering assigned tree :: Award 1 points :: FALSE\n[BST Linear Insert][Info] Running: [Left-leaning linear tree] Assignment during declaration (Copy CTOR); Trees should be unequal after altering assigned tree\n[BST Linear Insert][Pass] Points 52 ==> 53 (1): [Left-leaning linear tree] Assignment during declaration (Copy CTOR); Trees should be unequal after altering assigned tree :: Award 1 points :: TRUE\n[BST Linear Insert][Info] Running: [Right-leaning linear tree] Assignment after declaration; Trees should be equal\n[BST Linear Insert][Pass] Points 53 ==> 54 (1): [Right-leaning linear tree] Assignment after declaration; Trees should be equal :: Award 1 points :: TRUE\n[BST Linear Insert][Info] Running: [Right-leaning linear tree] Assignment after declaration; Trees should not be unequal\n[BST Linear Insert][Pass] Points 54 ==> 55 (1): [Right-leaning linear tree] Assignment after declaration; Trees should not be unequal :: Award 1 points :: FALSE\n[BST Linear Insert][Info] Running: [Right-leaning linear tree] Assignment after declaration; Trees should be not be equal after altering second tree\n[BST Linear Insert][Pass] Points 55 ==> 56 (1): [Right-leaning linear tree] Assignment after declaration; Trees should be not be equal after altering second tree :: Award 1 points :: FALSE\n[BST Linear Insert][Info] Running: [Right-leaning linear tree] Assignment after declaration; Trees should be unequal after altering second tree\n[BST Linear Insert][Pass] Points 56 ==> 57 (1): [Right-leaning linear tree] Assignment after declaration; Trees should be unequal after altering second tree :: Award 1 points :: TRUE\n[BST Linear Insert][Info] Running: [Right-leaning linear tree] Copy CTOR; Trees should be equal\n[BST Linear Insert][Pass] Points 57 ==> 58 (1): [Right-leaning linear tree] Copy CTOR; Trees should be equal :: Award 1 points :: TRUE\n[BST Linear Insert][Info] Running: [Right-leaning linear tree] Copy CTOR; Trees should not be unequal\n[BST Linear Insert][Pass] Points 58 ==> 59 (1): [Right-leaning linear tree] Copy CTOR; Trees should not be unequal :: Award 1 points :: FALSE\n[BST Linear Insert][Info] Running: [Right-leaning linear tree] Copy CTOR; Trees should be not be equal after altering second tree (ptr stealing?)\n[BST Linear Insert][Pass] Points 59 ==> 60 (1): [Right-leaning linear tree] Copy CTOR; Trees should be not be equal after altering second tree (ptr stealing?) :: Award 1 points :: FALSE\n[BST Linear Insert][Info] Running: [Right-leaning linear tree] Copy CTOR; Trees should be unequal after altering second tree (ptr stealing?)\n[BST Linear Insert][Pass] Points 60 ==> 61 (1): [Right-leaning linear tree] Copy CTOR; Trees should be unequal after altering second tree (ptr stealing?) :: Award 1 points :: TRUE\n[BST Linear Insert][Info] Running: [Right-leaning linear tree] Assignment during declaration (Copy CTOR); Trees should be equal\n[BST Linear Insert][Pass] Points 61 ==> 62 (1): [Right-leaning linear tree] Assignment during declaration (Copy CTOR); Trees should be equal :: Award 1 points :: TRUE\n[BST Linear Insert][Info] Running: [Right-leaning linear tree] Assignment during declaration (Copy CTOR); Trees should not be unequal\n[BST Linear Insert][Pass] Points 62 ==> 63 (1): [Right-leaning linear tree] Assignment during declaration (Copy CTOR); Trees should not be unequal :: Award 1 points :: FALSE\n[BST Linear Insert][Info] Running: [Right-leaning linear tree] Assignment during declaration (Copy CTOR); Trees should be not be equal after altering assigned tree\n[BST Linear Insert][Pass] Points 63 ==> 64 (1): [Right-leaning linear tree] Assignment during declaration (Copy CTOR); Trees should be not be equal after altering assigned tree :: Award 1 points :: FALSE\n[BST Linear Insert][Info] Running: [Right-leaning linear tree] Assignment during declaration (Copy CTOR); Trees should be unequal after altering assigned tree\n[BST Linear Insert][Pass] Points 64 ==> 65 (1): [Right-leaning linear tree] Assignment during declaration (Copy CTOR); Trees should be unequal after altering assigned tree :: Award 1 points :: TRUE\n[BST Linear Insert][Info] Running: Left-leaning linear tree; size should appear correct\n[BST Linear Insert][Pass] Points 65 ==> 66 (1): Left-leaning linear tree; size should appear correct :: Award 1 points\n[BST Linear Insert][Info] Running: Left-leaning linear tree; ordering should be correct\n[BST Linear Insert][Pass] Points 66 ==> 67 (1): Left-leaning linear tree; ordering should be correct :: Award 1 points :: TRUE\n[BST Linear Insert][Info] Running: Left-leaning linear tree; height should be correct\n[BST Linear Insert][Pass] Points 67 ==> 68 (1): Left-leaning linear tree; height should be correct :: Award 1 points\n[BST Linear Insert][Info] Running: Left-leaning linear tree; checked for valid node data and depth\n[BST Linear Insert][Pass] Points 68 ==> 69 (1): Left-leaning linear tree; checked for valid node data and depth :: Award 1 points :: TRUE\n[BST Linear Insert][Info] Running: Right-leaning linear tree; size should appear correct\n[BST Linear Insert][Pass] Points 69 ==> 70 (1): Right-leaning linear tree; size should appear correct :: Award 1 points\n[BST Linear Insert][Info] Running: Right-leaning linear tree; ordering should be correct\n[BST Linear Insert][Pass] Points 70 ==> 71 (1): Right-leaning linear tree; ordering should be correct :: Award 1 points :: TRUE\n[BST Linear Insert][Info] Running: Right-leaning linear tree; height should be correct\n[BST Linear Insert][Pass] Points 71 ==> 72 (1): Right-leaning linear tree; height should be correct :: Award 1 points\n[BST Linear Insert][Info] Running: Right-leaning linear tree; checked for valid node data and depth\n[BST Linear Insert][Pass] Points 72 ==> 73 (1): Right-leaning linear tree; checked for valid node data and depth :: Award 1 points :: TRUE\n[BST Linear Insert][Info] Running: [Left-leaning linear tree] Assignment after declaration; Trees should be equal\n[BST Linear Insert][Pass] Points 73 ==> 74 (1): [Left-leaning linear tree] Assignment after declaration; Trees should be equal :: Award 1 points :: TRUE\n[BST Linear Insert][Info] Running: [Left-leaning linear tree] Assignment after declaration; Trees should not be unequal\n[BST Linear Insert][Pass] Points 74 ==> 75 (1): [Left-leaning linear tree] Assignment after declaration; Trees should not be unequal :: Award 1 points :: FALSE\n[BST Linear Insert][Info] Running: [Left-leaning linear tree] Assignment after declaration; Trees should be not be equal after altering second tree\n[BST Linear Insert][Pass] Points 75 ==> 76 (1): [Left-leaning linear tree] Assignment after declaration; Trees should be not be equal after altering second tree :: Award 1 points :: FALSE\n[BST Linear Insert][Info] Running: [Left-leaning linear tree] Assignment after declaration; Trees should be unequal after altering second tree\n[BST Linear Insert][Pass] Points 76 ==> 77 (1): [Left-leaning linear tree] Assignment after declaration; Trees should be unequal after altering second tree :: Award 1 points :: TRUE\n[BST Linear Insert][Info] Running: [Left-leaning linear tree] Copy CTOR; Trees should be equal\n[BST Linear Insert][Pass] Points 77 ==> 78 (1): [Left-leaning linear tree] Copy CTOR; Trees should be equal :: Award 1 points :: TRUE\n[BST Linear Insert][Info] Running: [Left-leaning linear tree] Copy CTOR; Trees should not be unequal\n[BST Linear Insert][Pass] Points 78 ==> 79 (1): [Left-leaning linear tree] Copy CTOR; Trees should not be unequal :: Award 1 points :: FALSE\n[BST Linear Insert][Info] Running: [Left-leaning linear tree] Copy CTOR; Trees should be not be equal after altering second tree (ptr stealing?)\n[BST Linear Insert][Pass] Points 79 ==> 80 (1): [Left-leaning linear tree] Copy CTOR; Trees should be not be equal after altering second tree (ptr stealing?) :: Award 1 points :: FALSE\n[BST Linear Insert][Info] Running: [Left-leaning linear tree] Copy CTOR; Trees should be unequal after altering second tree (ptr stealing?)\n[BST Linear Insert][Pass] Points 80 ==> 81 (1): [Left-leaning linear tree] Copy CTOR; Trees should be unequal after altering second tree (ptr stealing?) :: Award 1 points :: TRUE\n[BST Linear Insert][Info] Running: [Left-leaning linear tree] Assignment during declaration (Copy CTOR); Trees should be equal\n[BST Linear Insert][Pass] Points 81 ==> 82 (1): [Left-leaning linear tree] Assignment during declaration (Copy CTOR); Trees should be equal :: Award 1 points :: TRUE\n[BST Linear Insert][Info] Running: [Left-leaning linear tree] Assignment during declaration (Copy CTOR); Trees should not be unequal\n[BST Linear Insert][Pass] Points 82 ==> 83 (1): [Left-leaning linear tree] Assignment during declaration (Copy CTOR); Trees should not be unequal :: Award 1 points :: FALSE\n[BST Linear Insert][Info] Running: [Left-leaning linear tree] Assignment during declaration (Copy CTOR); Trees should be not be equal after altering assigned tree\n[BST Linear Insert][Pass] Points 83 ==> 84 (1): [Left-leaning linear tree] Assignment during declaration (Copy CTOR); Trees should be not be equal after altering assigned tree :: Award 1 points :: FALSE\n[BST Linear Insert][Info] Running: [Left-leaning linear tree] Assignment during declaration (Copy CTOR); Trees should be unequal after altering assigned tree\n[BST Linear Insert][Pass] Points 84 ==> 85 (1): [Left-leaning linear tree] Assignment during declaration (Copy CTOR); Trees should be unequal after altering assigned tree :: Award 1 points :: TRUE\n[BST Linear Insert][Info] Running: [Right-leaning linear tree] Assignment after declaration; Trees should be equal\n[BST Linear Insert][Pass] Points 85 ==> 86 (1): [Right-leaning linear tree] Assignment after declaration; Trees should be equal :: Award 1 points :: TRUE\n[BST Linear Insert][Info] Running: [Right-leaning linear tree] Assignment after declaration; Trees should not be unequal\n[BST Linear Insert][Pass] Points 86 ==> 87 (1): [Right-leaning linear tree] Assignment after declaration; Trees should not be unequal :: Award 1 points :: FALSE\n[BST Linear Insert][Info] Running: [Right-leaning linear tree] Assignment after declaration; Trees should be not be equal after altering second tree\n[BST Linear Insert][Pass] Points 87 ==> 88 (1): [Right-leaning linear tree] Assignment after declaration; Trees should be not be equal after altering second tree :: Award 1 points :: FALSE\n[BST Linear Insert][Info] Running: [Right-leaning linear tree] Assignment after declaration; Trees should be unequal after altering second tree\n[BST Linear Insert][Pass] Points 88 ==> 89 (1): [Right-leaning linear tree] Assignment after declaration; Trees should be unequal after altering second tree :: Award 1 points :: TRUE\n[BST Linear Insert][Info] Running: [Right-leaning linear tree] Copy CTOR; Trees should be equal\n[BST Linear Insert][Pass] Points 89 ==> 90 (1): [Right-leaning linear tree] Copy CTOR; Trees should be equal :: Award 1 points :: TRUE\n[BST Linear Insert][Info] Running: [Right-leaning linear tree] Copy CTOR; Trees should not be unequal\n[BST Linear Insert][Pass] Points 90 ==> 91 (1): [Right-leaning linear tree] Copy CTOR; Trees should not be unequal :: Award 1 points :: FALSE\n[BST Linear Insert][Info] Running: [Right-leaning linear tree] Copy CTOR; Trees should be not be equal after altering second tree (ptr stealing?)\n[BST Linear Insert][Pass] Points 91 ==> 92 (1): [Right-leaning linear tree] Copy CTOR; Trees should be not be equal after altering second tree (ptr stealing?) :: Award 1 points :: FALSE\n[BST Linear Insert][Info] Running: [Right-leaning linear tree] Copy CTOR; Trees should be unequal after altering second tree (ptr stealing?)\n[BST Linear Insert][Pass] Points 92 ==> 93 (1): [Right-leaning linear tree] Copy CTOR; Trees should be unequal after altering second tree (ptr stealing?) :: Award 1 points :: TRUE\n[BST Linear Insert][Info] Running: [Right-leaning linear tree] Assignment during declaration (Copy CTOR); Trees should be equal\n[BST Linear Insert][Pass] Points 93 ==> 94 (1): [Right-leaning linear tree] Assignment during declaration (Copy CTOR); Trees should be equal :: Award 1 points :: TRUE\n[BST Linear Insert][Info] Running: [Right-leaning linear tree] Assignment during declaration (Copy CTOR); Trees should not be unequal\n[BST Linear Insert][Pass] Points 94 ==> 95 (1): [Right-leaning linear tree] Assignment during declaration (Copy CTOR); Trees should not be unequal :: Award 1 points :: FALSE\n[BST Linear Insert][Info] Running: [Right-leaning linear tree] Assignment during declaration (Copy CTOR); Trees should be not be equal after altering assigned tree\n[BST Linear Insert][Pass] Points 95 ==> 96 (1): [Right-leaning linear tree] Assignment during declaration (Copy CTOR); Trees should be not be equal after altering assigned tree :: Award 1 points :: FALSE\n[BST Linear Insert][Info] Running: [Right-leaning linear tree] Assignment during declaration (Copy CTOR); Trees should be unequal after altering assigned tree\n[BST Linear Insert][Pass] Points 96 ==> 97 (1): [Right-leaning linear tree] Assignment during declaration (Copy CTOR); Trees should be unequal after altering assigned tree :: Award 1 points :: TRUE\n[BST Linear Insert][Info] Running: Left-leaning linear tree; size should appear correct\n[BST Linear Insert][Pass] Points 97 ==> 98 (1): Left-leaning linear tree; size should appear correct :: Award 1 points\n[BST Linear Insert][Info] Running: Left-leaning linear tree; ordering should be correct\n[BST Linear Insert][Pass] Points 98 ==> 99 (1): Left-leaning linear tree; ordering should be correct :: Award 1 points :: TRUE\n[BST Linear Insert][Info] Running: Left-leaning linear tree; height should be correct\n[BST Linear Insert][Pass] Points 99 ==> 100 (1): Left-leaning linear tree; height should be correct :: Award 1 points\n[BST Linear Insert][Info] Running: Left-leaning linear tree; checked for valid node data and depth\n[BST Linear Insert][Pass] Points 100 ==> 101 (1): Left-leaning linear tree; checked for valid node data and depth :: Award 1 points :: TRUE\n[BST Linear Insert][Info] Running: Right-leaning linear tree; size should appear correct\n[BST Linear Insert][Pass] Points 101 ==> 102 (1): Right-leaning linear tree; size should appear correct :: Award 1 points\n[BST Linear Insert][Info] Running: Right-leaning linear tree; ordering should be correct\n[BST Linear Insert][Pass] Points 102 ==> 103 (1): Right-leaning linear tree; ordering should be correct :: Award 1 points :: TRUE\n[BST Linear Insert][Info] Running: Right-leaning linear tree; height should be correct\n[BST Linear Insert][Pass] Points 103 ==> 104 (1): Right-leaning linear tree; height should be correct :: Award 1 points\n[BST Linear Insert][Info] Running: Right-leaning linear tree; checked for valid node data and depth\n[BST Linear Insert][Pass] Points 104 ==> 105 (1): Right-leaning linear tree; checked for valid node data and depth :: Award 1 points :: TRUE\n[BST Linear Insert][Info] Running: [Left-leaning linear tree] Assignment after declaration; Trees should be equal\n[BST Linear Insert][Pass] Points 105 ==> 106 (1): [Left-leaning linear tree] Assignment after declaration; Trees should be equal :: Award 1 points :: TRUE\n[BST Linear Insert][Info] Running: [Left-leaning linear tree] Assignment after declaration; Trees should not be unequal\n[BST Linear Insert][Pass] Points 106 ==> 107 (1): [Left-leaning linear tree] Assignment after declaration; Trees should not be unequal :: Award 1 points :: FALSE\n[BST Linear Insert][Info] Running: [Left-leaning linear tree] Assignment after declaration; Trees should be not be equal after altering second tree\n[BST Linear Insert][Pass] Points 107 ==> 108 (1): [Left-leaning linear tree] Assignment after declaration; Trees should be not be equal after altering second tree :: Award 1 points :: FALSE\n[BST Linear Insert][Info] Running: [Left-leaning linear tree] Assignment after declaration; Trees should be unequal after altering second tree\n[BST Linear Insert][Pass] Points 108 ==> 109 (1): [Left-leaning linear tree] Assignment after declaration; Trees should be unequal after altering second tree :: Award 1 points :: TRUE\n[BST Linear Insert][Info] Running: [Left-leaning linear tree] Copy CTOR; Trees should be equal\n[BST Linear Insert][Pass] Points 109 ==> 110 (1): [Left-leaning linear tree] Copy CTOR; Trees should be equal :: Award 1 points :: TRUE\n[BST Linear Insert][Info] Running: [Left-leaning linear tree] Copy CTOR; Trees should not be unequal\n[BST Linear Insert][Pass] Points 110 ==> 111 (1): [Left-leaning linear tree] Copy CTOR; Trees should not be unequal :: Award 1 points :: FALSE\n[BST Linear Insert][Info] Running: [Left-leaning linear tree] Copy CTOR; Trees should be not be equal after altering second tree (ptr stealing?)\n[BST Linear Insert][Pass] Points 111 ==> 112 (1): [Left-leaning linear tree] Copy CTOR; Trees should be not be equal after altering second tree (ptr stealing?) :: Award 1 points :: FALSE\n[BST Linear Insert][Info] Running: [Left-leaning linear tree] Copy CTOR; Trees should be unequal after altering second tree (ptr stealing?)\n[BST Linear Insert][Pass] Points 112 ==> 113 (1): [Left-leaning linear tree] Copy CTOR; Trees should be unequal after altering second tree (ptr stealing?) :: Award 1 points :: TRUE\n[BST Linear Insert][Info] Running: [Left-leaning linear tree] Assignment during declaration (Copy CTOR); Trees should be equal\n[BST Linear Insert][Pass] Points 113 ==> 114 (1): [Left-leaning linear tree] Assignment during declaration (Copy CTOR); Trees should be equal :: Award 1 points :: TRUE\n[BST Linear Insert][Info] Running: [Left-leaning linear tree] Assignment during declaration (Copy CTOR); Trees should not be unequal\n[BST Linear Insert][Pass] Points 114 ==> 115 (1): [Left-leaning linear tree] Assignment during declaration (Copy CTOR); Trees should not be unequal :: Award 1 points :: FALSE\n[BST Linear Insert][Info] Running: [Left-leaning linear tree] Assignment during declaration (Copy CTOR); Trees should be not be equal after altering assigned tree\n[BST Linear Insert][Pass] Points 115 ==> 116 (1): [Left-leaning linear tree] Assignment during declaration (Copy CTOR); Trees should be not be equal after altering assigned tree :: Award 1 points :: FALSE\n[BST Linear Insert][Info] Running: [Left-leaning linear tree] Assignment during declaration (Copy CTOR); Trees should be unequal after altering assigned tree\n[BST Linear Insert][Pass] Points 116 ==> 117 (1): [Left-leaning linear tree] Assignment during declaration (Copy CTOR); Trees should be unequal after altering assigned tree :: Award 1 points :: TRUE\n[BST Linear Insert][Info] Running: [Right-leaning linear tree] Assignment after declaration; Trees should be equal\n[BST Linear Insert][Pass] Points 117 ==> 118 (1): [Right-leaning linear tree] Assignment after declaration; Trees should be equal :: Award 1 points :: TRUE\n[BST Linear Insert][Info] Running: [Right-leaning linear tree] Assignment after declaration; Trees should not be unequal\n[BST Linear Insert][Pass] Points 118 ==> 119 (1): [Right-leaning linear tree] Assignment after declaration; Trees should not be unequal :: Award 1 points :: FALSE\n[BST Linear Insert][Info] Running: [Right-leaning linear tree] Assignment after declaration; Trees should be not be equal after altering second tree\n[BST Linear Insert][Pass] Points 119 ==> 120 (1): [Right-leaning linear tree] Assignment after declaration; Trees should be not be equal after altering second tree :: Award 1 points :: FALSE\n[BST Linear Insert][Info] Running: [Right-leaning linear tree] Assignment after declaration; Trees should be unequal after altering second tree\n[BST Linear Insert][Pass] Points 120 ==> 121 (1): [Right-leaning linear tree] Assignment after declaration; Trees should be unequal after altering second tree :: Award 1 points :: TRUE\n[BST Linear Insert][Info] Running: [Right-leaning linear tree] Copy CTOR; Trees should be equal\n[BST Linear Insert][Pass] Points 121 ==> 122 (1): [Right-leaning linear tree] Copy CTOR; Trees should be equal :: Award 1 points :: TRUE\n[BST Linear Insert][Info] Running: [Right-leaning linear tree] Copy CTOR; Trees should not be unequal\n[BST Linear Insert][Pass] Points 122 ==> 123 (1): [Right-leaning linear tree] Copy CTOR; Trees should not be unequal :: Award 1 points :: FALSE\n[BST Linear Insert][Info] Running: [Right-leaning linear tree] Copy CTOR; Trees should be not be equal after altering second tree (ptr stealing?)\n[BST Linear Insert][Pass] Points 123 ==> 124 (1): [Right-leaning linear tree] Copy CTOR; Trees should be not be equal after altering second tree (ptr stealing?) :: Award 1 points :: FALSE\n[BST Linear Insert][Info] Running: [Right-leaning linear tree] Copy CTOR; Trees should be unequal after altering second tree (ptr stealing?)\n[BST Linear Insert][Pass] Points 124 ==> 125 (1): [Right-leaning linear tree] Copy CTOR; Trees should be unequal after altering second tree (ptr stealing?) :: Award 1 points :: TRUE\n[BST Linear Insert][Info] Running: [Right-leaning linear tree] Assignment during declaration (Copy CTOR); Trees should be equal\n[BST Linear Insert][Pass] Points 125 ==> 126 (1): [Right-leaning linear tree] Assignment during declaration (Copy CTOR); Trees should be equal :: Award 1 points :: TRUE\n[BST Linear Insert][Info] Running: [Right-leaning linear tree] Assignment during declaration (Copy CTOR); Trees should not be unequal\n[BST Linear Insert][Pass] Points 126 ==> 127 (1): [Right-leaning linear tree] Assignment during declaration (Copy CTOR); Trees should not be unequal :: Award 1 points :: FALSE\n[BST Linear Insert][Info] Running: [Right-leaning linear tree] Assignment during declaration (Copy CTOR); Trees should be not be equal after altering assigned tree\n[BST Linear Insert][Pass] Points 127 ==> 128 (1): [Right-leaning linear tree] Assignment during declaration (Copy CTOR); Trees should be not be equal after altering assigned tree :: Award 1 points :: FALSE\n[BST Linear Insert][Info] Running: [Right-leaning linear tree] Assignment during declaration (Copy CTOR); Trees should be unequal after altering assigned tree\n[BST Linear Insert][Pass] Points 128 ==> 129 (1): [Right-leaning linear tree] Assignment during declaration (Copy CTOR); Trees should be unequal after altering assigned tree :: Award 1 points :: TRUE\n[BST Linear Insert][Info] Running: Left-leaning linear tree; size should appear correct\n[BST Linear Insert][Pass] Points 129 ==> 130 (1): Left-leaning linear tree; size should appear correct :: Award 1 points\n[BST Linear Insert][Info] Running: Left-leaning linear tree; ordering should be correct\n[BST Linear Insert][Pass] Points 130 ==> 131 (1): Left-leaning linear tree; ordering should be correct :: Award 1 points :: TRUE\n[BST Linear Insert][Info] Running: Left-leaning linear tree; height should be correct\n[BST Linear Insert][Pass] Points 131 ==> 132 (1): Left-leaning linear tree; height should be correct :: Award 1 points\n[BST Linear Insert][Info] Running: Left-leaning linear tree; checked for valid node data and depth\n[BST Linear Insert][Pass] Points 132 ==> 133 (1): Left-leaning linear tree; checked for valid node data and depth :: Award 1 points :: TRUE\n[BST Linear Insert][Info] Running: Right-leaning linear tree; size should appear correct\n[BST Linear Insert][Pass] Points 133 ==> 134 (1): Right-leaning linear tree; size should appear correct :: Award 1 points\n[BST Linear Insert][Info] Running: Right-leaning linear tree; ordering should be correct\n[BST Linear Insert][Pass] Points 134 ==> 135 (1): Right-leaning linear tree; ordering should be correct :: Award 1 points :: TRUE\n[BST Linear Insert][Info] Running: Right-leaning linear tree; height should be correct\n[BST Linear Insert][Pass] Points 135 ==> 136 (1): Right-leaning linear tree; height should be correct :: Award 1 points\n[BST Linear Insert][Info] Running: Right-leaning linear tree; checked for valid node data and depth\n[BST Linear Insert][Pass] Points 136 ==> 137 (1): Right-leaning linear tree; checked for valid node data and depth :: Award 1 points :: TRUE\n[BST Linear Insert][Info] Running: [Left-leaning linear tree] Assignment after declaration; Trees should be equal\n[BST Linear Insert][Pass] Points 137 ==> 138 (1): [Left-leaning linear tree] Assignment after declaration; Trees should be equal :: Award 1 points :: TRUE\n[BST Linear Insert][Info] Running: [Left-leaning linear tree] Assignment after declaration; Trees should not be unequal\n[BST Linear Insert][Pass] Points 138 ==> 139 (1): [Left-leaning linear tree] Assignment after declaration; Trees should not be unequal :: Award 1 points :: FALSE\n[BST Linear Insert][Info] Running: [Left-leaning linear tree] Assignment after declaration; Trees should be not be equal after altering second tree\n[BST Linear Insert][Pass] Points 139 ==> 140 (1): [Left-leaning linear tree] Assignment after declaration; Trees should be not be equal after altering second tree :: Award 1 points :: FALSE\n[BST Linear Insert][Info] Running: [Left-leaning linear tree] Assignment after declaration; Trees should be unequal after altering second tree\n[BST Linear Insert][Pass] Points 140 ==> 141 (1): [Left-leaning linear tree] Assignment after declaration; Trees should be unequal after altering second tree :: Award 1 points :: TRUE\n[BST Linear Insert][Info] Running: [Left-leaning linear tree] Copy CTOR; Trees should be equal\n[BST Linear Insert][Pass] Points 141 ==> 142 (1): [Left-leaning linear tree] Copy CTOR; Trees should be equal :: Award 1 points :: TRUE\n[BST Linear Insert][Info] Running: [Left-leaning linear tree] Copy CTOR; Trees should not be unequal\n[BST Linear Insert][Pass] Points 142 ==> 143 (1): [Left-leaning linear tree] Copy CTOR; Trees should not be unequal :: Award 1 points :: FALSE\n[BST Linear Insert][Info] Running: [Left-leaning linear tree] Copy CTOR; Trees should be not be equal after altering second tree (ptr stealing?)\n[BST Linear Insert][Pass] Points 143 ==> 144 (1): [Left-leaning linear tree] Copy CTOR; Trees should be not be equal after altering second tree (ptr stealing?) :: Award 1 points :: FALSE\n[BST Linear Insert][Info] Running: [Left-leaning linear tree] Copy CTOR; Trees should be unequal after altering second tree (ptr stealing?)\n[BST Linear Insert][Pass] Points 144 ==> 145 (1): [Left-leaning linear tree] Copy CTOR; Trees should be unequal after altering second tree (ptr stealing?) :: Award 1 points :: TRUE\n[BST Linear Insert][Info] Running: [Left-leaning linear tree] Assignment during declaration (Copy CTOR); Trees should be equal\n[BST Linear Insert][Pass] Points 145 ==> 146 (1): [Left-leaning linear tree] Assignment during declaration (Copy CTOR); Trees should be equal :: Award 1 points :: TRUE\n[BST Linear Insert][Info] Running: [Left-leaning linear tree] Assignment during declaration (Copy CTOR); Trees should not be unequal\n[BST Linear Insert][Pass] Points 146 ==> 147 (1): [Left-leaning linear tree] Assignment during declaration (Copy CTOR); Trees should not be unequal :: Award 1 points :: FALSE\n[BST Linear Insert][Info] Running: [Left-leaning linear tree] Assignment during declaration (Copy CTOR); Trees should be not be equal after altering assigned tree\n[BST Linear Insert][Pass] Points 147 ==> 148 (1): [Left-leaning linear tree] Assignment during declaration (Copy CTOR); Trees should be not be equal after altering assigned tree :: Award 1 points :: FALSE\n[BST Linear Insert][Info] Running: [Left-leaning linear tree] Assignment during declaration (Copy CTOR); Trees should be unequal after altering assigned tree\n[BST Linear Insert][Pass] Points 148 ==> 149 (1): [Left-leaning linear tree] Assignment during declaration (Copy CTOR); Trees should be unequal after altering assigned tree :: Award 1 points :: TRUE\n[BST Linear Insert][Info] Running: [Right-leaning linear tree] Assignment after declaration; Trees should be equal\n[BST Linear Insert][Pass] Points 149 ==> 150 (1): [Right-leaning linear tree] Assignment after declaration; Trees should be equal :: Award 1 points :: TRUE\n[BST Linear Insert][Info] Running: [Right-leaning linear tree] Assignment after declaration; Trees should not be unequal\n[BST Linear Insert][Pass] Points 150 ==> 151 (1): [Right-leaning linear tree] Assignment after declaration; Trees should not be unequal :: Award 1 points :: FALSE\n[BST Linear Insert][Info] Running: [Right-leaning linear tree] Assignment after declaration; Trees should be not be equal after altering second tree\n[BST Linear Insert][Pass] Points 151 ==> 152 (1): [Right-leaning linear tree] Assignment after declaration; Trees should be not be equal after altering second tree :: Award 1 points :: FALSE\n[BST Linear Insert][Info] Running: [Right-leaning linear tree] Assignment after declaration; Trees should be unequal after altering second tree\n[BST Linear Insert][Pass] Points 152 ==> 153 (1): [Right-leaning linear tree] Assignment after declaration; Trees should be unequal after altering second tree :: Award 1 points :: TRUE\n[BST Linear Insert][Info] Running: [Right-leaning linear tree] Copy CTOR; Trees should be equal\n[BST Linear Insert][Pass] Points 153 ==> 154 (1): [Right-leaning linear tree] Copy CTOR; Trees should be equal :: Award 1 points :: TRUE\n[BST Linear Insert][Info] Running: [Right-leaning linear tree] Copy CTOR; Trees should not be unequal\n[BST Linear Insert][Pass] Points 154 ==> 155 (1): [Right-leaning linear tree] Copy CTOR; Trees should not be unequal :: Award 1 points :: FALSE\n[BST Linear Insert][Info] Running: [Right-leaning linear tree] Copy CTOR; Trees should be not be equal after altering second tree (ptr stealing?)\n[BST Linear Insert][Pass] Points 155 ==> 156 (1): [Right-leaning linear tree] Copy CTOR; Trees should be not be equal after altering second tree (ptr stealing?) :: Award 1 points :: FALSE\n[BST Linear Insert][Info] Running: [Right-leaning linear tree] Copy CTOR; Trees should be unequal after altering second tree (ptr stealing?)\n[BST Linear Insert][Pass] Points 156 ==> 157 (1): [Right-leaning linear tree] Copy CTOR; Trees should be unequal after altering second tree (ptr stealing?) :: Award 1 points :: TRUE\n[BST Linear Insert][Info] Running: [Right-leaning linear tree] Assignment during declaration (Copy CTOR); Trees should be equal\n[BST Linear Insert][Pass] Points 157 ==> 158 (1): [Right-leaning linear tree] Assignment during declaration (Copy CTOR); Trees should be equal :: Award 1 points :: TRUE\n[BST Linear Insert][Info] Running: [Right-leaning linear tree] Assignment during declaration (Copy CTOR); Trees should not be unequal\n[BST Linear Insert][Pass] Points 158 ==> 159 (1): [Right-leaning linear tree] Assignment during declaration (Copy CTOR); Trees should not be unequal :: Award 1 points :: FALSE\n[BST Linear Insert][Info] Running: [Right-leaning linear tree] Assignment during declaration (Copy CTOR); Trees should be not be equal after altering assigned tree\n[BST Linear Insert][Pass] Points 159 ==> 160 (1): [Right-leaning linear tree] Assignment during declaration (Copy CTOR); Trees should be not be equal after altering assigned tree :: Award 1 points :: FALSE\n[BST Linear Insert][Info] Running: [Right-leaning linear tree] Assignment during declaration (Copy CTOR); Trees should be unequal after altering assigned tree\n[BST Linear Insert][Pass] Points 160 ==> 161 (1): [Right-leaning linear tree] Assignment during declaration (Copy CTOR); Trees should be unequal after altering assigned tree :: Award 1 points :: TRUE\n",
         "score": 5
      },
      {
         "max_score": 5,
         "name": "BST Node Relations",
         "output": "[BST Node Relations][Info] Setting fixed points possible to 63\n[BST Node Relations][Info] Running: Checking node relationships\n[BST Node Relations][Info] Creating tree with:\n[BST Node Relations][Info] [6, 3, 2, 5, 21, 58, 8, 65, 1]\n[BST Node Relations][Pass] Points 0 ==> 1 (1): Checking node relationships :: Award 1 points :: Did not catch exception\n[BST Node Relations][Info] Running: Root node knows it does not have a parent\n[BST Node Relations][Pass] Points 1 ==> 2 (1): Root node knows it does not have a parent :: Award 1 points :: FALSE\n[BST Node Relations][Info] Running: Root node knows it is the root\n[BST Node Relations][Pass] Points 2 ==> 3 (1): Root node knows it is the root :: Award 1 points :: TRUE\n[BST Node Relations][Info] Running: Node 6 knows it is internal\n[BST Node Relations][Pass] Points 3 ==> 4 (1): Node 6 knows it is internal :: Award 1 points :: TRUE\n[BST Node Relations][Info] Running: Node 6 knows it is not a leaf\n[BST Node Relations][Pass] Points 4 ==> 5 (1): Node 6 knows it is not a leaf :: Award 1 points :: FALSE\n[BST Node Relations][Info] Running: Node 6 knows it is not external\n[BST Node Relations][Pass] Points 5 ==> 6 (1): Node 6 knows it is not external :: Award 1 points :: FALSE\n[BST Node Relations][Info] Running: Node 3 knows it is internal\n[BST Node Relations][Pass] Points 6 ==> 7 (1): Node 3 knows it is internal :: Award 1 points :: TRUE\n[BST Node Relations][Info] Running: Node 3 knows it is not a leaf\n[BST Node Relations][Pass] Points 7 ==> 8 (1): Node 3 knows it is not a leaf :: Award 1 points :: FALSE\n[BST Node Relations][Info] Running: Node 3 knows it is not external\n[BST Node Relations][Pass] Points 8 ==> 9 (1): Node 3 knows it is not external :: Award 1 points :: FALSE\n[BST Node Relations][Info] Running: Node 21 knows it is internal\n[BST Node Relations][Pass] Points 9 ==> 10 (1): Node 21 knows it is internal :: Award 1 points :: TRUE\n[BST Node Relations][Info] Running: Node 21 knows it is not a leaf\n[BST Node Relations][Pass] Points 10 ==> 11 (1): Node 21 knows it is not a leaf :: Award 1 points :: FALSE\n[BST Node Relations][Info] Running: Node 21 knows it is not external\n[BST Node Relations][Pass] Points 11 ==> 12 (1): Node 21 knows it is not external :: Award 1 points :: FALSE\n[BST Node Relations][Info] Running: Node 2 knows it is internal\n[BST Node Relations][Pass] Points 12 ==> 13 (1): Node 2 knows it is internal :: Award 1 points :: TRUE\n[BST Node Relations][Info] Running: Node 2 knows it is not a leaf\n[BST Node Relations][Pass] Points 13 ==> 14 (1): Node 2 knows it is not a leaf :: Award 1 points :: FALSE\n[BST Node Relations][Info] Running: Node 2 knows it is not external\n[BST Node Relations][Pass] Points 14 ==> 15 (1): Node 2 knows it is not external :: Award 1 points :: FALSE\n[BST Node Relations][Info] Running: Node 58 knows it is internal\n[BST Node Relations][Pass] Points 15 ==> 16 (1): Node 58 knows it is internal :: Award 1 points :: TRUE\n[BST Node Relations][Info] Running: Node 58 knows it is not a leaf\n[BST Node Relations][Pass] Points 16 ==> 17 (1): Node 58 knows it is not a leaf :: Award 1 points :: FALSE\n[BST Node Relations][Info] Running: Node 58 knows it is not external\n[BST Node Relations][Pass] Points 17 ==> 18 (1): Node 58 knows it is not external :: Award 1 points :: FALSE\n[BST Node Relations][Info] Running: Node 1 knows it is not internal\n[BST Node Relations][Pass] Points 18 ==> 19 (1): Node 1 knows it is not internal :: Award 1 points :: FALSE\n[BST Node Relations][Info] Running: Node 1 knows it is a leaf\n[BST Node Relations][Pass] Points 19 ==> 20 (1): Node 1 knows it is a leaf :: Award 1 points :: TRUE\n[BST Node Relations][Info] Running: Node 1 knows it is external\n[BST Node Relations][Pass] Points 20 ==> 21 (1): Node 1 knows it is external :: Award 1 points :: TRUE\n[BST Node Relations][Info] Running: Node 65 knows it is not internal\n[BST Node Relations][Pass] Points 21 ==> 22 (1): Node 65 knows it is not internal :: Award 1 points :: FALSE\n[BST Node Relations][Info] Running: Node 65 knows it is a leaf\n[BST Node Relations][Pass] Points 22 ==> 23 (1): Node 65 knows it is a leaf :: Award 1 points :: TRUE\n[BST Node Relations][Info] Running: Node 65 knows it is external\n[BST Node Relations][Pass] Points 23 ==> 24 (1): Node 65 knows it is external :: Award 1 points :: TRUE\n[BST Node Relations][Info] Running: Node 6 knows it has a left child\n[BST Node Relations][Pass] Points 24 ==> 25 (1): Node 6 knows it has a left child :: Award 1 points :: TRUE\n[BST Node Relations][Info] Running: Node 3 knows it has a left child\n[BST Node Relations][Pass] Points 25 ==> 26 (1): Node 3 knows it has a left child :: Award 1 points :: TRUE\n[BST Node Relations][Info] Running: Node 21 knows it has a left child\n[BST Node Relations][Pass] Points 26 ==> 27 (1): Node 21 knows it has a left child :: Award 1 points :: TRUE\n[BST Node Relations][Info] Running: Node 2 knows it has a left child\n[BST Node Relations][Pass] Points 27 ==> 28 (1): Node 2 knows it has a left child :: Award 1 points :: TRUE\n[BST Node Relations][Info] Running: Node 1 knows it has no left child\n[BST Node Relations][Pass] Points 28 ==> 29 (1): Node 1 knows it has no left child :: Award 1 points :: FALSE\n[BST Node Relations][Info] Running: Node 5 knows it has no left child\n[BST Node Relations][Pass] Points 29 ==> 30 (1): Node 5 knows it has no left child :: Award 1 points :: FALSE\n[BST Node Relations][Info] Running: Node 8 knows it has no left child\n[BST Node Relations][Pass] Points 30 ==> 31 (1): Node 8 knows it has no left child :: Award 1 points :: FALSE\n[BST Node Relations][Info] Running: Node 58 knows it has no left child\n[BST Node Relations][Pass] Points 31 ==> 32 (1): Node 58 knows it has no left child :: Award 1 points :: FALSE\n[BST Node Relations][Info] Running: Node 65 knows it has no left child\n[BST Node Relations][Pass] Points 32 ==> 33 (1): Node 65 knows it has no left child :: Award 1 points :: FALSE\n[BST Node Relations][Info] Running: Node 6 knows it has a right child\n[BST Node Relations][Pass] Points 33 ==> 34 (1): Node 6 knows it has a right child :: Award 1 points :: TRUE\n[BST Node Relations][Info] Running: Node 3 knows it has a right child\n[BST Node Relations][Pass] Points 34 ==> 35 (1): Node 3 knows it has a right child :: Award 1 points :: TRUE\n[BST Node Relations][Info] Running: Node 21 knows it has a right child\n[BST Node Relations][Pass] Points 35 ==> 36 (1): Node 21 knows it has a right child :: Award 1 points :: TRUE\n[BST Node Relations][Info] Running: Node 58 knows it has a right child\n[BST Node Relations][Pass] Points 36 ==> 37 (1): Node 58 knows it has a right child :: Award 1 points :: TRUE\n[BST Node Relations][Info] Running: Node 1 knows it has no right child\n[BST Node Relations][Pass] Points 37 ==> 38 (1): Node 1 knows it has no right child :: Award 1 points :: FALSE\n[BST Node Relations][Info] Running: Node 2 knows it has no right child\n[BST Node Relations][Pass] Points 38 ==> 39 (1): Node 2 knows it has no right child :: Award 1 points :: FALSE\n[BST Node Relations][Info] Running: Node 5 knows it has no right child\n[BST Node Relations][Pass] Points 39 ==> 40 (1): Node 5 knows it has no right child :: Award 1 points :: FALSE\n[BST Node Relations][Info] Running: Node 8 knows it has no right child\n[BST Node Relations][Pass] Points 40 ==> 41 (1): Node 8 knows it has no right child :: Award 1 points :: FALSE\n[BST Node Relations][Info] Running: Node 65 knows it has no right child\n[BST Node Relations][Pass] Points 41 ==> 42 (1): Node 65 knows it has no right child :: Award 1 points :: FALSE\n[BST Node Relations][Info] Running: Node 6 knows its depth\n[BST Node Relations][Pass] Points 42 ==> 43 (1): Node 6 knows its depth :: Award 1 points\n[BST Node Relations][Info] Running: Node 3 knows its depth\n[BST Node Relations][Pass] Points 43 ==> 44 (1): Node 3 knows its depth :: Award 1 points\n[BST Node Relations][Info] Running: Node 2 knows its depth\n[BST Node Relations][Pass] Points 44 ==> 45 (1): Node 2 knows its depth :: Award 1 points\n[BST Node Relations][Info] Running: Node 5 knows its depth\n[BST Node Relations][Pass] Points 45 ==> 46 (1): Node 5 knows its depth :: Award 1 points\n[BST Node Relations][Info] Running: Node 21 knows its depth\n[BST Node Relations][Pass] Points 46 ==> 47 (1): Node 21 knows its depth :: Award 1 points\n[BST Node Relations][Info] Running: Node 58 knows its depth\n[BST Node Relations][Pass] Points 47 ==> 48 (1): Node 58 knows its depth :: Award 1 points\n[BST Node Relations][Info] Running: Node 8 knows its depth\n[BST Node Relations][Pass] Points 48 ==> 49 (1): Node 8 knows its depth :: Award 1 points\n[BST Node Relations][Info] Running: Node 65 knows its depth\n[BST Node Relations][Pass] Points 49 ==> 50 (1): Node 65 knows its depth :: Award 1 points\n[BST Node Relations][Info] Running: Node 1 knows its depth\n[BST Node Relations][Pass] Points 50 ==> 51 (1): Node 1 knows its depth :: Award 1 points\n[BST Node Relations][Info] Running: Node 6 knows its child count\n[BST Node Relations][Pass] Points 51 ==> 52 (1): Node 6 knows its child count :: Award 1 points\n[BST Node Relations][Info] Running: Node 3 knows its child count\n[BST Node Relations][Pass] Points 52 ==> 53 (1): Node 3 knows its child count :: Award 1 points\n[BST Node Relations][Info] Running: Node 21 knows its child count\n[BST Node Relations][Pass] Points 53 ==> 54 (1): Node 21 knows its child count :: Award 1 points\n[BST Node Relations][Info] Running: Node 2 knows its child count\n[BST Node Relations][Pass] Points 54 ==> 55 (1): Node 2 knows its child count :: Award 1 points\n[BST Node Relations][Info] Running: Node 5 knows its child count\n[BST Node Relations][Pass] Points 55 ==> 56 (1): Node 5 knows its child count :: Award 1 points\n[BST Node Relations][Info] Running: Node 8 knows its child count\n[BST Node Relations][Pass] Points 56 ==> 57 (1): Node 8 knows its child count :: Award 1 points\n[BST Node Relations][Info] Running: Node 58 knows its child count\n[BST Node Relations][Pass] Points 57 ==> 58 (1): Node 58 knows its child count :: Award 1 points\n[BST Node Relations][Info] Running: Node 1 knows its child count\n[BST Node Relations][Pass] Points 58 ==> 59 (1): Node 1 knows its child count :: Award 1 points\n[BST Node Relations][Info] Running: Node 65 knows its child count\n[BST Node Relations][Pass] Points 59 ==> 60 (1): Node 65 knows its child count :: Award 1 points\n[BST Node Relations][Info] Running: Tree correctly computes its height\n[BST Node Relations][Pass] Points 60 ==> 61 (1): Tree correctly computes its height :: Award 1 points\n[BST Node Relations][Info] Running: Medium tree; tree topology; Check size = 9\n[BST Node Relations][Pass] Points 61 ==> 62 (1): Medium tree; tree topology; Check size = 9 :: Award 1 points\n[BST Node Relations][Info] Running: Medium tree; tree topology; Check valid topology\n[BST Node Relations][Pass] Points 62 ==> 63 (1): Medium tree; tree topology; Check valid topology :: Award 1 points :: TRUE\n",
         "score": 5
      },
      {
         "max_score": 5,
         "name": "BST Topology",
         "output": "[BST Topology][Info] Setting fixed points possible to 7\n[BST Topology][Info] Running: Checking node topology\n[BST Topology][Pass] Points 0 ==> 1 (1): Checking node topology :: Award 1 points :: Did not catch exception\n[BST Topology][Info] Running: Complex Tree 1; tree topology; Check size = 20\n[BST Topology][Pass] Points 1 ==> 2 (1): Complex Tree 1; tree topology; Check size = 20 :: Award 1 points\n[BST Topology][Info] Running: Complex Tree 1; tree topology; Check valid topology\n[BST Topology][Pass] Points 2 ==> 3 (1): Complex Tree 1; tree topology; Check valid topology :: Award 1 points :: TRUE\n[BST Topology][Info] Running: Complex Tree 2; tree topology; Check size = 20\n[BST Topology][Pass] Points 3 ==> 4 (1): Complex Tree 2; tree topology; Check size = 20 :: Award 1 points\n[BST Topology][Info] Running: Complex Tree 2; tree topology; Check valid topology\n[BST Topology][Pass] Points 4 ==> 5 (1): Complex Tree 2; tree topology; Check valid topology :: Award 1 points :: TRUE\n[BST Topology][Info] Running: Complex Tree 3; tree topology; Check size = 20\n[BST Topology][Pass] Points 5 ==> 6 (1): Complex Tree 3; tree topology; Check size = 20 :: Award 1 points\n[BST Topology][Info] Running: Complex Tree 3; tree topology; Check valid topology\n[BST Topology][Pass] Points 6 ==> 7 (1): Complex Tree 3; tree topology; Check valid topology :: Award 1 points :: TRUE\n",
         "score": 5
      },
      {
         "max_score": 5,
         "name": "BST Exists",
         "output": "[BST Exists][Info] Setting fixed points possible to 251\n[BST Exists][Info] Running: Exists tests\n[BST Exists][Pass] Points 0 ==> 1 (1): Exists tests :: Award 1 points :: Did not catch exception\n[BST Exists][Info] Running: Check tree knows the number 942 exists\n[BST Exists][Pass] Points 1 ==> 2 (1): Check tree knows the number 942 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 953 exists\n[BST Exists][Pass] Points 2 ==> 3 (1): Check tree knows the number 953 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 961 exists\n[BST Exists][Pass] Points 3 ==> 4 (1): Check tree knows the number 961 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 966 exists\n[BST Exists][Pass] Points 4 ==> 5 (1): Check tree knows the number 966 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 976 exists\n[BST Exists][Pass] Points 5 ==> 6 (1): Check tree knows the number 976 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 978 exists\n[BST Exists][Pass] Points 6 ==> 7 (1): Check tree knows the number 978 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 990 exists\n[BST Exists][Pass] Points 7 ==> 8 (1): Check tree knows the number 990 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 1007 exists\n[BST Exists][Pass] Points 8 ==> 9 (1): Check tree knows the number 1007 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 1025 exists\n[BST Exists][Pass] Points 9 ==> 10 (1): Check tree knows the number 1025 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 1038 exists\n[BST Exists][Pass] Points 10 ==> 11 (1): Check tree knows the number 1038 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 1048 exists\n[BST Exists][Pass] Points 11 ==> 12 (1): Check tree knows the number 1048 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 1053 exists\n[BST Exists][Pass] Points 12 ==> 13 (1): Check tree knows the number 1053 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 1066 exists\n[BST Exists][Pass] Points 13 ==> 14 (1): Check tree knows the number 1066 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 1080 exists\n[BST Exists][Pass] Points 14 ==> 15 (1): Check tree knows the number 1080 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 1093 exists\n[BST Exists][Pass] Points 15 ==> 16 (1): Check tree knows the number 1093 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 1103 exists\n[BST Exists][Pass] Points 16 ==> 17 (1): Check tree knows the number 1103 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 1119 exists\n[BST Exists][Pass] Points 17 ==> 18 (1): Check tree knows the number 1119 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 1137 exists\n[BST Exists][Pass] Points 18 ==> 19 (1): Check tree knows the number 1137 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 1149 exists\n[BST Exists][Pass] Points 19 ==> 20 (1): Check tree knows the number 1149 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 1159 exists\n[BST Exists][Pass] Points 20 ==> 21 (1): Check tree knows the number 1159 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 1169 exists\n[BST Exists][Pass] Points 21 ==> 22 (1): Check tree knows the number 1169 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 1179 exists\n[BST Exists][Pass] Points 22 ==> 23 (1): Check tree knows the number 1179 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 1186 exists\n[BST Exists][Pass] Points 23 ==> 24 (1): Check tree knows the number 1186 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 1198 exists\n[BST Exists][Pass] Points 24 ==> 25 (1): Check tree knows the number 1198 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 1209 exists\n[BST Exists][Pass] Points 25 ==> 26 (1): Check tree knows the number 1209 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 951 does not exist\n[BST Exists][Pass] Points 26 ==> 27 (1): Check tree knows the number 951 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 956 does not exist\n[BST Exists][Pass] Points 27 ==> 28 (1): Check tree knows the number 956 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 963 does not exist\n[BST Exists][Pass] Points 28 ==> 29 (1): Check tree knows the number 963 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 970 does not exist\n[BST Exists][Pass] Points 29 ==> 30 (1): Check tree knows the number 970 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 977 does not exist\n[BST Exists][Pass] Points 30 ==> 31 (1): Check tree knows the number 977 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 987 does not exist\n[BST Exists][Pass] Points 31 ==> 32 (1): Check tree knows the number 987 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 999 does not exist\n[BST Exists][Pass] Points 32 ==> 33 (1): Check tree knows the number 999 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 1015 does not exist\n[BST Exists][Pass] Points 33 ==> 34 (1): Check tree knows the number 1015 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 1035 does not exist\n[BST Exists][Pass] Points 34 ==> 35 (1): Check tree knows the number 1035 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 1044 does not exist\n[BST Exists][Pass] Points 35 ==> 36 (1): Check tree knows the number 1044 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 1052 does not exist\n[BST Exists][Pass] Points 36 ==> 37 (1): Check tree knows the number 1052 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 1056 does not exist\n[BST Exists][Pass] Points 37 ==> 38 (1): Check tree knows the number 1056 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 1075 does not exist\n[BST Exists][Pass] Points 38 ==> 39 (1): Check tree knows the number 1075 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 1087 does not exist\n[BST Exists][Pass] Points 39 ==> 40 (1): Check tree knows the number 1087 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 1099 does not exist\n[BST Exists][Pass] Points 40 ==> 41 (1): Check tree knows the number 1099 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 1113 does not exist\n[BST Exists][Pass] Points 41 ==> 42 (1): Check tree knows the number 1113 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 1127 does not exist\n[BST Exists][Pass] Points 42 ==> 43 (1): Check tree knows the number 1127 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 1141 does not exist\n[BST Exists][Pass] Points 43 ==> 44 (1): Check tree knows the number 1141 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 1155 does not exist\n[BST Exists][Pass] Points 44 ==> 45 (1): Check tree knows the number 1155 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 1164 does not exist\n[BST Exists][Pass] Points 45 ==> 46 (1): Check tree knows the number 1164 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 1170 does not exist\n[BST Exists][Pass] Points 46 ==> 47 (1): Check tree knows the number 1170 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 1181 does not exist\n[BST Exists][Pass] Points 47 ==> 48 (1): Check tree knows the number 1181 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 1195 does not exist\n[BST Exists][Pass] Points 48 ==> 49 (1): Check tree knows the number 1195 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 1202 does not exist\n[BST Exists][Pass] Points 49 ==> 50 (1): Check tree knows the number 1202 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 1219 does not exist\n[BST Exists][Pass] Points 50 ==> 51 (1): Check tree knows the number 1219 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 117 exists\n[BST Exists][Pass] Points 51 ==> 52 (1): Check tree knows the number 117 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 127 exists\n[BST Exists][Pass] Points 52 ==> 53 (1): Check tree knows the number 127 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 134 exists\n[BST Exists][Pass] Points 53 ==> 54 (1): Check tree knows the number 134 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 145 exists\n[BST Exists][Pass] Points 54 ==> 55 (1): Check tree knows the number 145 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 157 exists\n[BST Exists][Pass] Points 55 ==> 56 (1): Check tree knows the number 157 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 170 exists\n[BST Exists][Pass] Points 56 ==> 57 (1): Check tree knows the number 170 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 180 exists\n[BST Exists][Pass] Points 57 ==> 58 (1): Check tree knows the number 180 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 199 exists\n[BST Exists][Pass] Points 58 ==> 59 (1): Check tree knows the number 199 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 209 exists\n[BST Exists][Pass] Points 59 ==> 60 (1): Check tree knows the number 209 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 212 exists\n[BST Exists][Pass] Points 60 ==> 61 (1): Check tree knows the number 212 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 216 exists\n[BST Exists][Pass] Points 61 ==> 62 (1): Check tree knows the number 216 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 222 exists\n[BST Exists][Pass] Points 62 ==> 63 (1): Check tree knows the number 222 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 228 exists\n[BST Exists][Pass] Points 63 ==> 64 (1): Check tree knows the number 228 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 240 exists\n[BST Exists][Pass] Points 64 ==> 65 (1): Check tree knows the number 240 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 256 exists\n[BST Exists][Pass] Points 65 ==> 66 (1): Check tree knows the number 256 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 266 exists\n[BST Exists][Pass] Points 66 ==> 67 (1): Check tree knows the number 266 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 271 exists\n[BST Exists][Pass] Points 67 ==> 68 (1): Check tree knows the number 271 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 287 exists\n[BST Exists][Pass] Points 68 ==> 69 (1): Check tree knows the number 287 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 293 exists\n[BST Exists][Pass] Points 69 ==> 70 (1): Check tree knows the number 293 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 306 exists\n[BST Exists][Pass] Points 70 ==> 71 (1): Check tree knows the number 306 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 314 exists\n[BST Exists][Pass] Points 71 ==> 72 (1): Check tree knows the number 314 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 329 exists\n[BST Exists][Pass] Points 72 ==> 73 (1): Check tree knows the number 329 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 332 exists\n[BST Exists][Pass] Points 73 ==> 74 (1): Check tree knows the number 332 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 342 exists\n[BST Exists][Pass] Points 74 ==> 75 (1): Check tree knows the number 342 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 352 exists\n[BST Exists][Pass] Points 75 ==> 76 (1): Check tree knows the number 352 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 122 does not exist\n[BST Exists][Pass] Points 76 ==> 77 (1): Check tree knows the number 122 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 130 does not exist\n[BST Exists][Pass] Points 77 ==> 78 (1): Check tree knows the number 130 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 144 does not exist\n[BST Exists][Pass] Points 78 ==> 79 (1): Check tree knows the number 144 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 153 does not exist\n[BST Exists][Pass] Points 79 ==> 80 (1): Check tree knows the number 153 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 165 does not exist\n[BST Exists][Pass] Points 80 ==> 81 (1): Check tree knows the number 165 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 175 does not exist\n[BST Exists][Pass] Points 81 ==> 82 (1): Check tree knows the number 175 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 190 does not exist\n[BST Exists][Pass] Points 82 ==> 83 (1): Check tree knows the number 190 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 206 does not exist\n[BST Exists][Pass] Points 83 ==> 84 (1): Check tree knows the number 206 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 211 does not exist\n[BST Exists][Pass] Points 84 ==> 85 (1): Check tree knows the number 211 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 213 does not exist\n[BST Exists][Pass] Points 85 ==> 86 (1): Check tree knows the number 213 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 217 does not exist\n[BST Exists][Pass] Points 86 ==> 87 (1): Check tree knows the number 217 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 223 does not exist\n[BST Exists][Pass] Points 87 ==> 88 (1): Check tree knows the number 223 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 234 does not exist\n[BST Exists][Pass] Points 88 ==> 89 (1): Check tree knows the number 234 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 248 does not exist\n[BST Exists][Pass] Points 89 ==> 90 (1): Check tree knows the number 248 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 260 does not exist\n[BST Exists][Pass] Points 90 ==> 91 (1): Check tree knows the number 260 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 267 does not exist\n[BST Exists][Pass] Points 91 ==> 92 (1): Check tree knows the number 267 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 280 does not exist\n[BST Exists][Pass] Points 92 ==> 93 (1): Check tree knows the number 280 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 291 does not exist\n[BST Exists][Pass] Points 93 ==> 94 (1): Check tree knows the number 291 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 300 does not exist\n[BST Exists][Pass] Points 94 ==> 95 (1): Check tree knows the number 300 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 308 does not exist\n[BST Exists][Pass] Points 95 ==> 96 (1): Check tree knows the number 308 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 321 does not exist\n[BST Exists][Pass] Points 96 ==> 97 (1): Check tree knows the number 321 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 331 does not exist\n[BST Exists][Pass] Points 97 ==> 98 (1): Check tree knows the number 331 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 335 does not exist\n[BST Exists][Pass] Points 98 ==> 99 (1): Check tree knows the number 335 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 349 does not exist\n[BST Exists][Pass] Points 99 ==> 100 (1): Check tree knows the number 349 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 354 does not exist\n[BST Exists][Pass] Points 100 ==> 101 (1): Check tree knows the number 354 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 913 exists\n[BST Exists][Pass] Points 101 ==> 102 (1): Check tree knows the number 913 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 916 exists\n[BST Exists][Pass] Points 102 ==> 103 (1): Check tree knows the number 916 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 930 exists\n[BST Exists][Pass] Points 103 ==> 104 (1): Check tree knows the number 930 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 942 exists\n[BST Exists][Pass] Points 104 ==> 105 (1): Check tree knows the number 942 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 957 exists\n[BST Exists][Pass] Points 105 ==> 106 (1): Check tree knows the number 957 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 968 exists\n[BST Exists][Pass] Points 106 ==> 107 (1): Check tree knows the number 968 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 987 exists\n[BST Exists][Pass] Points 107 ==> 108 (1): Check tree knows the number 987 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 994 exists\n[BST Exists][Pass] Points 108 ==> 109 (1): Check tree knows the number 994 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 998 exists\n[BST Exists][Pass] Points 109 ==> 110 (1): Check tree knows the number 998 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 1014 exists\n[BST Exists][Pass] Points 110 ==> 111 (1): Check tree knows the number 1014 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 1024 exists\n[BST Exists][Pass] Points 111 ==> 112 (1): Check tree knows the number 1024 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 1038 exists\n[BST Exists][Pass] Points 112 ==> 113 (1): Check tree knows the number 1038 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 1046 exists\n[BST Exists][Pass] Points 113 ==> 114 (1): Check tree knows the number 1046 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 1059 exists\n[BST Exists][Pass] Points 114 ==> 115 (1): Check tree knows the number 1059 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 1066 exists\n[BST Exists][Pass] Points 115 ==> 116 (1): Check tree knows the number 1066 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 1079 exists\n[BST Exists][Pass] Points 116 ==> 117 (1): Check tree knows the number 1079 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 1089 exists\n[BST Exists][Pass] Points 117 ==> 118 (1): Check tree knows the number 1089 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 1101 exists\n[BST Exists][Pass] Points 118 ==> 119 (1): Check tree knows the number 1101 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 1113 exists\n[BST Exists][Pass] Points 119 ==> 120 (1): Check tree knows the number 1113 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 1130 exists\n[BST Exists][Pass] Points 120 ==> 121 (1): Check tree knows the number 1130 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 1145 exists\n[BST Exists][Pass] Points 121 ==> 122 (1): Check tree knows the number 1145 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 1147 exists\n[BST Exists][Pass] Points 122 ==> 123 (1): Check tree knows the number 1147 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 1158 exists\n[BST Exists][Pass] Points 123 ==> 124 (1): Check tree knows the number 1158 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 1167 exists\n[BST Exists][Pass] Points 124 ==> 125 (1): Check tree knows the number 1167 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 1178 exists\n[BST Exists][Pass] Points 125 ==> 126 (1): Check tree knows the number 1178 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 914 does not exist\n[BST Exists][Pass] Points 126 ==> 127 (1): Check tree knows the number 914 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 924 does not exist\n[BST Exists][Pass] Points 127 ==> 128 (1): Check tree knows the number 924 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 932 does not exist\n[BST Exists][Pass] Points 128 ==> 129 (1): Check tree knows the number 932 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 950 does not exist\n[BST Exists][Pass] Points 129 ==> 130 (1): Check tree knows the number 950 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 959 does not exist\n[BST Exists][Pass] Points 130 ==> 131 (1): Check tree knows the number 959 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 978 does not exist\n[BST Exists][Pass] Points 131 ==> 132 (1): Check tree knows the number 978 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 993 does not exist\n[BST Exists][Pass] Points 132 ==> 133 (1): Check tree knows the number 993 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 996 does not exist\n[BST Exists][Pass] Points 133 ==> 134 (1): Check tree knows the number 996 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 1004 does not exist\n[BST Exists][Pass] Points 134 ==> 135 (1): Check tree knows the number 1004 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 1017 does not exist\n[BST Exists][Pass] Points 135 ==> 136 (1): Check tree knows the number 1017 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 1032 does not exist\n[BST Exists][Pass] Points 136 ==> 137 (1): Check tree knows the number 1032 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 1043 does not exist\n[BST Exists][Pass] Points 137 ==> 138 (1): Check tree knows the number 1043 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 1051 does not exist\n[BST Exists][Pass] Points 138 ==> 139 (1): Check tree knows the number 1051 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 1062 does not exist\n[BST Exists][Pass] Points 139 ==> 140 (1): Check tree knows the number 1062 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 1069 does not exist\n[BST Exists][Pass] Points 140 ==> 141 (1): Check tree knows the number 1069 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 1082 does not exist\n[BST Exists][Pass] Points 141 ==> 142 (1): Check tree knows the number 1082 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 1099 does not exist\n[BST Exists][Pass] Points 142 ==> 143 (1): Check tree knows the number 1099 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 1104 does not exist\n[BST Exists][Pass] Points 143 ==> 144 (1): Check tree knows the number 1104 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 1122 does not exist\n[BST Exists][Pass] Points 144 ==> 145 (1): Check tree knows the number 1122 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 1139 does not exist\n[BST Exists][Pass] Points 145 ==> 146 (1): Check tree knows the number 1139 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 1146 does not exist\n[BST Exists][Pass] Points 146 ==> 147 (1): Check tree knows the number 1146 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 1153 does not exist\n[BST Exists][Pass] Points 147 ==> 148 (1): Check tree knows the number 1153 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 1166 does not exist\n[BST Exists][Pass] Points 148 ==> 149 (1): Check tree knows the number 1166 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 1168 does not exist\n[BST Exists][Pass] Points 149 ==> 150 (1): Check tree knows the number 1168 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 1187 does not exist\n[BST Exists][Pass] Points 150 ==> 151 (1): Check tree knows the number 1187 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 636 exists\n[BST Exists][Pass] Points 151 ==> 152 (1): Check tree knows the number 636 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 643 exists\n[BST Exists][Pass] Points 152 ==> 153 (1): Check tree knows the number 643 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 647 exists\n[BST Exists][Pass] Points 153 ==> 154 (1): Check tree knows the number 647 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 655 exists\n[BST Exists][Pass] Points 154 ==> 155 (1): Check tree knows the number 655 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 669 exists\n[BST Exists][Pass] Points 155 ==> 156 (1): Check tree knows the number 669 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 682 exists\n[BST Exists][Pass] Points 156 ==> 157 (1): Check tree knows the number 682 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 700 exists\n[BST Exists][Pass] Points 157 ==> 158 (1): Check tree knows the number 700 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 711 exists\n[BST Exists][Pass] Points 158 ==> 159 (1): Check tree knows the number 711 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 725 exists\n[BST Exists][Pass] Points 159 ==> 160 (1): Check tree knows the number 725 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 732 exists\n[BST Exists][Pass] Points 160 ==> 161 (1): Check tree knows the number 732 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 745 exists\n[BST Exists][Pass] Points 161 ==> 162 (1): Check tree knows the number 745 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 760 exists\n[BST Exists][Pass] Points 162 ==> 163 (1): Check tree knows the number 760 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 766 exists\n[BST Exists][Pass] Points 163 ==> 164 (1): Check tree knows the number 766 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 781 exists\n[BST Exists][Pass] Points 164 ==> 165 (1): Check tree knows the number 781 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 792 exists\n[BST Exists][Pass] Points 165 ==> 166 (1): Check tree knows the number 792 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 799 exists\n[BST Exists][Pass] Points 166 ==> 167 (1): Check tree knows the number 799 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 814 exists\n[BST Exists][Pass] Points 167 ==> 168 (1): Check tree knows the number 814 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 818 exists\n[BST Exists][Pass] Points 168 ==> 169 (1): Check tree knows the number 818 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 831 exists\n[BST Exists][Pass] Points 169 ==> 170 (1): Check tree knows the number 831 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 840 exists\n[BST Exists][Pass] Points 170 ==> 171 (1): Check tree knows the number 840 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 851 exists\n[BST Exists][Pass] Points 171 ==> 172 (1): Check tree knows the number 851 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 864 exists\n[BST Exists][Pass] Points 172 ==> 173 (1): Check tree knows the number 864 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 881 exists\n[BST Exists][Pass] Points 173 ==> 174 (1): Check tree knows the number 881 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 891 exists\n[BST Exists][Pass] Points 174 ==> 175 (1): Check tree knows the number 891 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 902 exists\n[BST Exists][Pass] Points 175 ==> 176 (1): Check tree knows the number 902 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 639 does not exist\n[BST Exists][Pass] Points 176 ==> 177 (1): Check tree knows the number 639 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 645 does not exist\n[BST Exists][Pass] Points 177 ==> 178 (1): Check tree knows the number 645 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 651 does not exist\n[BST Exists][Pass] Points 178 ==> 179 (1): Check tree knows the number 651 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 664 does not exist\n[BST Exists][Pass] Points 179 ==> 180 (1): Check tree knows the number 664 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 674 does not exist\n[BST Exists][Pass] Points 180 ==> 181 (1): Check tree knows the number 674 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 692 does not exist\n[BST Exists][Pass] Points 181 ==> 182 (1): Check tree knows the number 692 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 704 does not exist\n[BST Exists][Pass] Points 182 ==> 183 (1): Check tree knows the number 704 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 716 does not exist\n[BST Exists][Pass] Points 183 ==> 184 (1): Check tree knows the number 716 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 728 does not exist\n[BST Exists][Pass] Points 184 ==> 185 (1): Check tree knows the number 728 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 738 does not exist\n[BST Exists][Pass] Points 185 ==> 186 (1): Check tree knows the number 738 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 751 does not exist\n[BST Exists][Pass] Points 186 ==> 187 (1): Check tree knows the number 751 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 763 does not exist\n[BST Exists][Pass] Points 187 ==> 188 (1): Check tree knows the number 763 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 776 does not exist\n[BST Exists][Pass] Points 188 ==> 189 (1): Check tree knows the number 776 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 787 does not exist\n[BST Exists][Pass] Points 189 ==> 190 (1): Check tree knows the number 787 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 795 does not exist\n[BST Exists][Pass] Points 190 ==> 191 (1): Check tree knows the number 795 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 804 does not exist\n[BST Exists][Pass] Points 191 ==> 192 (1): Check tree knows the number 804 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 815 does not exist\n[BST Exists][Pass] Points 192 ==> 193 (1): Check tree knows the number 815 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 828 does not exist\n[BST Exists][Pass] Points 193 ==> 194 (1): Check tree knows the number 828 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 832 does not exist\n[BST Exists][Pass] Points 194 ==> 195 (1): Check tree knows the number 832 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 848 does not exist\n[BST Exists][Pass] Points 195 ==> 196 (1): Check tree knows the number 848 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 860 does not exist\n[BST Exists][Pass] Points 196 ==> 197 (1): Check tree knows the number 860 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 874 does not exist\n[BST Exists][Pass] Points 197 ==> 198 (1): Check tree knows the number 874 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 885 does not exist\n[BST Exists][Pass] Points 198 ==> 199 (1): Check tree knows the number 885 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 898 does not exist\n[BST Exists][Pass] Points 199 ==> 200 (1): Check tree knows the number 898 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 903 does not exist\n[BST Exists][Pass] Points 200 ==> 201 (1): Check tree knows the number 903 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 936 exists\n[BST Exists][Pass] Points 201 ==> 202 (1): Check tree knows the number 936 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 948 exists\n[BST Exists][Pass] Points 202 ==> 203 (1): Check tree knows the number 948 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 961 exists\n[BST Exists][Pass] Points 203 ==> 204 (1): Check tree knows the number 961 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 974 exists\n[BST Exists][Pass] Points 204 ==> 205 (1): Check tree knows the number 974 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 976 exists\n[BST Exists][Pass] Points 205 ==> 206 (1): Check tree knows the number 976 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 988 exists\n[BST Exists][Pass] Points 206 ==> 207 (1): Check tree knows the number 988 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 998 exists\n[BST Exists][Pass] Points 207 ==> 208 (1): Check tree knows the number 998 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 1008 exists\n[BST Exists][Pass] Points 208 ==> 209 (1): Check tree knows the number 1008 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 1018 exists\n[BST Exists][Pass] Points 209 ==> 210 (1): Check tree knows the number 1018 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 1033 exists\n[BST Exists][Pass] Points 210 ==> 211 (1): Check tree knows the number 1033 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 1041 exists\n[BST Exists][Pass] Points 211 ==> 212 (1): Check tree knows the number 1041 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 1053 exists\n[BST Exists][Pass] Points 212 ==> 213 (1): Check tree knows the number 1053 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 1064 exists\n[BST Exists][Pass] Points 213 ==> 214 (1): Check tree knows the number 1064 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 1074 exists\n[BST Exists][Pass] Points 214 ==> 215 (1): Check tree knows the number 1074 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 1090 exists\n[BST Exists][Pass] Points 215 ==> 216 (1): Check tree knows the number 1090 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 1097 exists\n[BST Exists][Pass] Points 216 ==> 217 (1): Check tree knows the number 1097 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 1113 exists\n[BST Exists][Pass] Points 217 ==> 218 (1): Check tree knows the number 1113 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 1131 exists\n[BST Exists][Pass] Points 218 ==> 219 (1): Check tree knows the number 1131 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 1142 exists\n[BST Exists][Pass] Points 219 ==> 220 (1): Check tree knows the number 1142 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 1149 exists\n[BST Exists][Pass] Points 220 ==> 221 (1): Check tree knows the number 1149 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 1164 exists\n[BST Exists][Pass] Points 221 ==> 222 (1): Check tree knows the number 1164 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 1174 exists\n[BST Exists][Pass] Points 222 ==> 223 (1): Check tree knows the number 1174 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 1187 exists\n[BST Exists][Pass] Points 223 ==> 224 (1): Check tree knows the number 1187 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 1195 exists\n[BST Exists][Pass] Points 224 ==> 225 (1): Check tree knows the number 1195 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 1210 exists\n[BST Exists][Pass] Points 225 ==> 226 (1): Check tree knows the number 1210 exists :: Award 1 points :: TRUE\n[BST Exists][Info] Running: Check tree knows the number 942 does not exist\n[BST Exists][Pass] Points 226 ==> 227 (1): Check tree knows the number 942 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 957 does not exist\n[BST Exists][Pass] Points 227 ==> 228 (1): Check tree knows the number 957 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 964 does not exist\n[BST Exists][Pass] Points 228 ==> 229 (1): Check tree knows the number 964 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 975 does not exist\n[BST Exists][Pass] Points 229 ==> 230 (1): Check tree knows the number 975 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 978 does not exist\n[BST Exists][Pass] Points 230 ==> 231 (1): Check tree knows the number 978 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 989 does not exist\n[BST Exists][Pass] Points 231 ==> 232 (1): Check tree knows the number 989 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 1006 does not exist\n[BST Exists][Pass] Points 232 ==> 233 (1): Check tree knows the number 1006 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 1013 does not exist\n[BST Exists][Pass] Points 233 ==> 234 (1): Check tree knows the number 1013 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 1027 does not exist\n[BST Exists][Pass] Points 234 ==> 235 (1): Check tree knows the number 1027 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 1034 does not exist\n[BST Exists][Pass] Points 235 ==> 236 (1): Check tree knows the number 1034 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 1047 does not exist\n[BST Exists][Pass] Points 236 ==> 237 (1): Check tree knows the number 1047 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 1055 does not exist\n[BST Exists][Pass] Points 237 ==> 238 (1): Check tree knows the number 1055 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 1066 does not exist\n[BST Exists][Pass] Points 238 ==> 239 (1): Check tree knows the number 1066 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 1084 does not exist\n[BST Exists][Pass] Points 239 ==> 240 (1): Check tree knows the number 1084 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 1091 does not exist\n[BST Exists][Pass] Points 240 ==> 241 (1): Check tree knows the number 1091 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 1106 does not exist\n[BST Exists][Pass] Points 241 ==> 242 (1): Check tree knows the number 1106 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 1122 does not exist\n[BST Exists][Pass] Points 242 ==> 243 (1): Check tree knows the number 1122 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 1134 does not exist\n[BST Exists][Pass] Points 243 ==> 244 (1): Check tree knows the number 1134 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 1145 does not exist\n[BST Exists][Pass] Points 244 ==> 245 (1): Check tree knows the number 1145 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 1157 does not exist\n[BST Exists][Pass] Points 245 ==> 246 (1): Check tree knows the number 1157 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 1171 does not exist\n[BST Exists][Pass] Points 246 ==> 247 (1): Check tree knows the number 1171 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 1178 does not exist\n[BST Exists][Pass] Points 247 ==> 248 (1): Check tree knows the number 1178 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 1192 does not exist\n[BST Exists][Pass] Points 248 ==> 249 (1): Check tree knows the number 1192 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 1200 does not exist\n[BST Exists][Pass] Points 249 ==> 250 (1): Check tree knows the number 1200 does not exist :: Award 1 points :: FALSE\n[BST Exists][Info] Running: Check tree knows the number 1213 does not exist\n[BST Exists][Pass] Points 250 ==> 251 (1): Check tree knows the number 1213 does not exist :: Award 1 points :: FALSE\n",
         "score": 5
      },
      {
         "max_score": 5,
         "name": "BST Traversals",
         "output": "[BST Traversals][Info] Setting fixed points possible to 16\n[BST Traversals][Info] Running: Traversals\n[BST Traversals][Pass] Points 0 ==> 1 (1): Traversals :: Award 1 points :: Did not catch exception\n[BST Traversals][Info] Running: Tree 1::PreOrder; Traversal check seems to be OK\n[BST Traversals][Pass] Points 1 ==> 2 (1): Tree 1::PreOrder; Traversal check seems to be OK :: Award 1 points :: TRUE\n[BST Traversals][Info] Running: Tree 1::InOrder; Traversal check seems to be OK\n[BST Traversals][Pass] Points 2 ==> 3 (1): Tree 1::InOrder; Traversal check seems to be OK :: Award 1 points :: TRUE\n[BST Traversals][Info] Running: Tree 1::PostOder; Traversal check seems to be OK\n[BST Traversals][Pass] Points 3 ==> 4 (1): Tree 1::PostOder; Traversal check seems to be OK :: Award 1 points :: TRUE\n[BST Traversals][Info] Running: Tree 2::PreOrder; Traversal check seems to be OK\n[BST Traversals][Pass] Points 4 ==> 5 (1): Tree 2::PreOrder; Traversal check seems to be OK :: Award 1 points :: TRUE\n[BST Traversals][Info] Running: Tree 2::InOrder; Traversal check seems to be OK\n[BST Traversals][Pass] Points 5 ==> 6 (1): Tree 2::InOrder; Traversal check seems to be OK :: Award 1 points :: TRUE\n[BST Traversals][Info] Running: Tree 2::PostOder; Traversal check seems to be OK\n[BST Traversals][Pass] Points 6 ==> 7 (1): Tree 2::PostOder; Traversal check seems to be OK :: Award 1 points :: TRUE\n[BST Traversals][Info] Running: Tree 3::PreOrder; Traversal check seems to be OK\n[BST Traversals][Pass] Points 7 ==> 8 (1): Tree 3::PreOrder; Traversal check seems to be OK :: Award 1 points :: TRUE\n[BST Traversals][Info] Running: Tree 3::InOrder; Traversal check seems to be OK\n[BST Traversals][Pass] Points 8 ==> 9 (1): Tree 3::InOrder; Traversal check seems to be OK :: Award 1 points :: TRUE\n[BST Traversals][Info] Running: Tree 3::PostOder; Traversal check seems to be OK\n[BST Traversals][Pass] Points 9 ==> 10 (1): Tree 3::PostOder; Traversal check seems to be OK :: Award 1 points :: TRUE\n[BST Traversals][Info] Running: Tree 4::PreOrder; Traversal check seems to be OK\n[BST Traversals][Pass] Points 10 ==> 11 (1): Tree 4::PreOrder; Traversal check seems to be OK :: Award 1 points :: TRUE\n[BST Traversals][Info] Running: Tree 4::InOrder; Traversal check seems to be OK\n[BST Traversals][Pass] Points 11 ==> 12 (1): Tree 4::InOrder; Traversal check seems to be OK :: Award 1 points :: TRUE\n[BST Traversals][Info] Running: Tree 4::PostOder; Traversal check seems to be OK\n[BST Traversals][Pass] Points 12 ==> 13 (1): Tree 4::PostOder; Traversal check seems to be OK :: Award 1 points :: TRUE\n[BST Traversals][Info] Running: Tree 5::PreOrder; Traversal check seems to be OK\n[BST Traversals][Pass] Points 13 ==> 14 (1): Tree 5::PreOrder; Traversal check seems to be OK :: Award 1 points :: TRUE\n[BST Traversals][Info] Running: Tree 5::InOrder; Traversal check seems to be OK\n[BST Traversals][Pass] Points 14 ==> 15 (1): Tree 5::InOrder; Traversal check seems to be OK :: Award 1 points :: TRUE\n[BST Traversals][Info] Running: Tree 5::PostOder; Traversal check seems to be OK\n[BST Traversals][Pass] Points 15 ==> 16 (1): Tree 5::PostOder; Traversal check seems to be OK :: Award 1 points :: TRUE\n",
         "score": 5
      },
      {
         "max_score": 5,
         "name": "BST Easy Removals",
         "output": "[BST Easy Removals][Info] Setting fixed points possible to 19\n[BST Easy Removals][Info] Running: Removing from empty tree should throw an exception\n[BST Easy Removals][Pass] Points 0 ==> 1 (1): Removing from empty tree should throw an exception :: Award 1 points :: Caught exception :: Cannot remove from empty tree\n[BST Easy Removals][Info] Running: Removing leaves nodes\n[BST Easy Removals][Info] checkTreeRemovals() - Created tree:\n[BST Easy Removals][Info] [35, 37, 89, 25, 77, 52, 19, 84, 47, 57, 13, 31, 40, 62, 7, 71, 88, 60, 82, 12]\n[BST Easy Removals][Info] checkTreeRemovals() - Will remove according to the following sequence:\n[BST Easy Removals][Info] [31, 12, 82, 88, 40, 60, 71]\n[BST Easy Removals][Info] Removing 31 and expecting: \n[BST Easy Removals][Info] [35, 25, 37, 19, 89, 13, 77, 7, 52, 84, 12, 47, 57, 82, 88, 40, 62, 60, 71]\n[BST Easy Removals][Info] Removing 12 and expecting: \n[BST Easy Removals][Info] [35, 25, 37, 19, 89, 13, 77, 7, 52, 84, 47, 57, 82, 88, 40, 62, 60, 71]\n[BST Easy Removals][Info] Removing 82 and expecting: \n[BST Easy Removals][Info] [35, 25, 37, 19, 89, 13, 77, 7, 52, 84, 47, 57, 88, 40, 62, 60, 71]\n[BST Easy Removals][Info] Removing 88 and expecting: \n[BST Easy Removals][Info] [35, 25, 37, 19, 89, 13, 77, 7, 52, 84, 47, 57, 40, 62, 60, 71]\n[BST Easy Removals][Info] Removing 40 and expecting: \n[BST Easy Removals][Info] [35, 25, 37, 19, 89, 13, 77, 7, 52, 84, 47, 57, 62, 60, 71]\n[BST Easy Removals][Info] Removing 60 and expecting: \n[BST Easy Removals][Info] [35, 25, 37, 19, 89, 13, 77, 7, 52, 84, 47, 57, 62, 71]\n[BST Easy Removals][Info] Removing 71 and expecting: \n[BST Easy Removals][Info] [35, 25, 37, 19, 89, 13, 77, 7, 52, 84, 47, 57, 62]\n[BST Easy Removals][Pass] Points 1 ==> 2 (1): Removing leaves nodes :: Award 1 points :: Did not catch exception\n[BST Easy Removals][Info] Running: Removing 1-child nodes\n[BST Easy Removals][Info] checkTreeRemovals() - Created tree:\n[BST Easy Removals][Info] [44, 32, 18, 85, 37, 45, 53, 82, 59, 95, 80, 74, 33, 5, 88, 9, 30, 51, 19, 97]\n[BST Easy Removals][Info] checkTreeRemovals() - Will remove according to the following sequence:\n[BST Easy Removals][Info] [5, 30, 37, 45, 82, 59, 80]\n[BST Easy Removals][Info] Removing 5 and expecting: \n[BST Easy Removals][Info] [44, 32, 85, 18, 37, 45, 95, 9, 30, 33, 53, 88, 97, 19, 51, 82, 59, 80, 74]\n[BST Easy Removals][Info] Removing 30 and expecting: \n[BST Easy Removals][Info] [44, 32, 85, 18, 37, 45, 95, 9, 19, 33, 53, 88, 97, 51, 82, 59, 80, 74]\n[BST Easy Removals][Info] Removing 37 and expecting: \n[BST Easy Removals][Info] [44, 32, 85, 18, 33, 45, 95, 9, 19, 53, 88, 97, 51, 82, 59, 80, 74]\n[BST Easy Removals][Info] Removing 45 and expecting: \n[BST Easy Removals][Info] [44, 32, 85, 18, 33, 53, 95, 9, 19, 51, 82, 88, 97, 59, 80, 74]\n[BST Easy Removals][Info] Removing 82 and expecting: \n[BST Easy Removals][Info] [44, 32, 85, 18, 33, 53, 95, 9, 19, 51, 59, 88, 97, 80, 74]\n[BST Easy Removals][Info] Removing 59 and expecting: \n[BST Easy Removals][Info] [44, 32, 85, 18, 33, 53, 95, 9, 19, 51, 80, 88, 97, 74]\n[BST Easy Removals][Info] Removing 80 and expecting: \n[BST Easy Removals][Info] [44, 32, 85, 18, 33, 53, 95, 9, 19, 51, 74, 88, 97]\n[BST Easy Removals][Pass] Points 2 ==> 3 (1): Removing 1-child nodes :: Award 1 points :: Did not catch exception\n[BST Easy Removals][Info] Running: Tree 1, leaves only; Tree removals (just removed 31); Traversal check seems to be OK\n[BST Easy Removals][Pass] Points 3 ==> 4 (1): Tree 1, leaves only; Tree removals (just removed 31); Traversal check seems to be OK :: Award 1 points :: TRUE\n[BST Easy Removals][Info] Running: Tree 1, leaves only; Tree removals (just removed 12); Traversal check seems to be OK\n[BST Easy Removals][Pass] Points 4 ==> 5 (1): Tree 1, leaves only; Tree removals (just removed 12); Traversal check seems to be OK :: Award 1 points :: TRUE\n[BST Easy Removals][Info] Running: Tree 1, leaves only; Tree removals (just removed 82); Traversal check seems to be OK\n[BST Easy Removals][Pass] Points 5 ==> 6 (1): Tree 1, leaves only; Tree removals (just removed 82); Traversal check seems to be OK :: Award 1 points :: TRUE\n[BST Easy Removals][Info] Running: Tree 1, leaves only; Tree removals (just removed 88); Traversal check seems to be OK\n[BST Easy Removals][Pass] Points 6 ==> 7 (1): Tree 1, leaves only; Tree removals (just removed 88); Traversal check seems to be OK :: Award 1 points :: TRUE\n[BST Easy Removals][Info] Running: Tree 1, leaves only; Tree removals (just removed 40); Traversal check seems to be OK\n[BST Easy Removals][Pass] Points 7 ==> 8 (1): Tree 1, leaves only; Tree removals (just removed 40); Traversal check seems to be OK :: Award 1 points :: TRUE\n[BST Easy Removals][Info] Running: Tree 1, leaves only; Tree removals (just removed 60); Traversal check seems to be OK\n[BST Easy Removals][Pass] Points 8 ==> 9 (1): Tree 1, leaves only; Tree removals (just removed 60); Traversal check seems to be OK :: Award 1 points :: TRUE\n[BST Easy Removals][Info] Running: Tree 1, leaves only; Tree removals (just removed 71); Traversal check seems to be OK\n[BST Easy Removals][Pass] Points 9 ==> 10 (1): Tree 1, leaves only; Tree removals (just removed 71); Traversal check seems to be OK :: Award 1 points :: TRUE\n[BST Easy Removals][Info] Running: Tree 1, leaves only; Tree removals; Seemed to succeed\n[BST Easy Removals][Pass] Points 10 ==> 11 (1): Tree 1, leaves only; Tree removals; Seemed to succeed :: Award 1 points :: TRUE\n[BST Easy Removals][Info] Running: Tree 2, nodes with 1 child only; Tree removals (just removed 5); Traversal check seems to be OK\n[BST Easy Removals][Pass] Points 11 ==> 12 (1): Tree 2, nodes with 1 child only; Tree removals (just removed 5); Traversal check seems to be OK :: Award 1 points :: TRUE\n[BST Easy Removals][Info] Running: Tree 2, nodes with 1 child only; Tree removals (just removed 30); Traversal check seems to be OK\n[BST Easy Removals][Pass] Points 12 ==> 13 (1): Tree 2, nodes with 1 child only; Tree removals (just removed 30); Traversal check seems to be OK :: Award 1 points :: TRUE\n[BST Easy Removals][Info] Running: Tree 2, nodes with 1 child only; Tree removals (just removed 37); Traversal check seems to be OK\n[BST Easy Removals][Pass] Points 13 ==> 14 (1): Tree 2, nodes with 1 child only; Tree removals (just removed 37); Traversal check seems to be OK :: Award 1 points :: TRUE\n[BST Easy Removals][Info] Running: Tree 2, nodes with 1 child only; Tree removals (just removed 45); Traversal check seems to be OK\n[BST Easy Removals][Pass] Points 14 ==> 15 (1): Tree 2, nodes with 1 child only; Tree removals (just removed 45); Traversal check seems to be OK :: Award 1 points :: TRUE\n[BST Easy Removals][Info] Running: Tree 2, nodes with 1 child only; Tree removals (just removed 82); Traversal check seems to be OK\n[BST Easy Removals][Pass] Points 15 ==> 16 (1): Tree 2, nodes with 1 child only; Tree removals (just removed 82); Traversal check seems to be OK :: Award 1 points :: TRUE\n[BST Easy Removals][Info] Running: Tree 2, nodes with 1 child only; Tree removals (just removed 59); Traversal check seems to be OK\n[BST Easy Removals][Pass] Points 16 ==> 17 (1): Tree 2, nodes with 1 child only; Tree removals (just removed 59); Traversal check seems to be OK :: Award 1 points :: TRUE\n[BST Easy Removals][Info] Running: Tree 2, nodes with 1 child only; Tree removals (just removed 80); Traversal check seems to be OK\n[BST Easy Removals][Pass] Points 17 ==> 18 (1): Tree 2, nodes with 1 child only; Tree removals (just removed 80); Traversal check seems to be OK :: Award 1 points :: TRUE\n[BST Easy Removals][Info] Running: Tree 2, nodes with 1 child only; Tree removals; Seemed to succeed\n[BST Easy Removals][Pass] Points 18 ==> 19 (1): Tree 2, nodes with 1 child only; Tree removals; Seemed to succeed :: Award 1 points :: TRUE\n",
         "score": 5
      },
      {
         "max_score": 5,
         "name": "BST Hard Removals",
         "output": "[BST Hard Removals][Info] Setting fixed points possible to 19\n[BST Hard Removals][Info] Running: Removing nodes with 2 children\n[BST Hard Removals][Info] checkTreeRemovals() - Created tree:\n[BST Hard Removals][Info] [11, 27, 38, 53, 10, 31, 81, 17, 71, 83, 51, 91, 13, 36, 85, 86, 2, 61, 29, 4]\n[BST Hard Removals][Info] checkTreeRemovals() - Will remove according to the following sequence:\n[BST Hard Removals][Info] [38, 11, 81, 31, 27, 13]\n[BST Hard Removals][Info] Removing 38 and expecting: \n[BST Hard Removals][Info] [11, 10, 27, 2, 17, 51, 4, 13, 31, 53, 29, 36, 81, 71, 83, 61, 91, 85, 86]\n[BST Hard Removals][Info] Removing 11 and expecting: \n[BST Hard Removals][Info] [13, 10, 27, 2, 17, 51, 4, 31, 53, 29, 36, 81, 71, 83, 61, 91, 85, 86]\n[BST Hard Removals][Info] Removing 81 and expecting: \n[BST Hard Removals][Info] [13, 10, 27, 2, 17, 51, 4, 31, 53, 29, 36, 83, 71, 91, 61, 85, 86]\n[BST Hard Removals][Info] Removing 31 and expecting: \n[BST Hard Removals][Info] [13, 10, 27, 2, 17, 51, 4, 36, 53, 29, 83, 71, 91, 61, 85, 86]\n[BST Hard Removals][Info] Removing 27 and expecting: \n[BST Hard Removals][Info] [13, 10, 29, 2, 17, 51, 4, 36, 53, 83, 71, 91, 61, 85, 86]\n[BST Hard Removals][Info] Removing 13 and expecting: \n[BST Hard Removals][Info] [17, 10, 29, 2, 51, 4, 36, 53, 83, 71, 91, 61, 85, 86]\n[BST Hard Removals][Pass] Points 0 ==> 1 (1): Removing nodes with 2 children :: Award 1 points :: Did not catch exception\n[BST Hard Removals][Info] Running: Removing nodes with 2 children\n[BST Hard Removals][Info] checkTreeRemovals() - Created tree:\n[BST Hard Removals][Info] [55, 48, 75, 21, 64, 10, 22, 40, 54, 78, 45, 74, 85, 52, 9, 51, 57, 50, 86, 41]\n[BST Hard Removals][Info] checkTreeRemovals() - Will remove according to the following sequence:\n[BST Hard Removals][Info] [21, 78, 9, 51, 45, 55]\n[BST Hard Removals][Info] Removing 21 and expecting: \n[BST Hard Removals][Info] [55, 48, 75, 22, 54, 64, 78, 10, 40, 52, 57, 74, 85, 9, 45, 51, 86, 41, 50]\n[BST Hard Removals][Info] Removing 78 and expecting: \n[BST Hard Removals][Info] [55, 48, 75, 22, 54, 64, 85, 10, 40, 52, 57, 74, 86, 9, 45, 51, 41, 50]\n[BST Hard Removals][Info] Removing 9 and expecting: \n[BST Hard Removals][Info] [55, 48, 75, 22, 54, 64, 85, 10, 40, 52, 57, 74, 86, 45, 51, 41, 50]\n[BST Hard Removals][Info] Removing 51 and expecting: \n[BST Hard Removals][Info] [55, 48, 75, 22, 54, 64, 85, 10, 40, 52, 57, 74, 86, 45, 50, 41]\n[BST Hard Removals][Info] Removing 45 and expecting: \n[BST Hard Removals][Info] [55, 48, 75, 22, 54, 64, 85, 10, 40, 52, 57, 74, 86, 41, 50]\n[BST Hard Removals][Info] Removing 55 and expecting: \n[BST Hard Removals][Info] [57, 48, 75, 22, 54, 64, 85, 10, 40, 52, 74, 86, 41, 50]\n[BST Hard Removals][Pass] Points 1 ==> 2 (1): Removing nodes with 2 children :: Award 1 points :: Did not catch exception\n[BST Hard Removals][Info] Running: Checking height and depths before and after removals\n[BST Hard Removals][Info] Creating tree with data:\n[BST Hard Removals][Info] [55, 48, 75, 21, 64, 10, 22, 40, 54, 78, 45, 74, 85, 52, 9, 51, 57, 50, 86, 41]\n[BST Hard Removals][Info] Tree should probably now be:\n[BST Hard Removals][Info] [57, 48, 75, 22, 54, 64, 85, 10, 40, 52, 74, 86, 41, 50]\n[BST Hard Removals][Pass] Points 2 ==> 3 (1): Checking height and depths before and after removals :: Award 1 points :: Did not catch exception\n[BST Hard Removals][Info] Running: Tree 1, nodes with 2 children; Tree removals (just removed 38); Traversal check seems to be OK\n[BST Hard Removals][Pass] Points 3 ==> 4 (1): Tree 1, nodes with 2 children; Tree removals (just removed 38); Traversal check seems to be OK :: Award 1 points :: TRUE\n[BST Hard Removals][Info] Running: Tree 1, nodes with 2 children; Tree removals (just removed 11); Traversal check seems to be OK\n[BST Hard Removals][Pass] Points 4 ==> 5 (1): Tree 1, nodes with 2 children; Tree removals (just removed 11); Traversal check seems to be OK :: Award 1 points :: TRUE\n[BST Hard Removals][Info] Running: Tree 1, nodes with 2 children; Tree removals (just removed 81); Traversal check seems to be OK\n[BST Hard Removals][Pass] Points 5 ==> 6 (1): Tree 1, nodes with 2 children; Tree removals (just removed 81); Traversal check seems to be OK :: Award 1 points :: TRUE\n[BST Hard Removals][Info] Running: Tree 1, nodes with 2 children; Tree removals (just removed 31); Traversal check seems to be OK\n[BST Hard Removals][Pass] Points 6 ==> 7 (1): Tree 1, nodes with 2 children; Tree removals (just removed 31); Traversal check seems to be OK :: Award 1 points :: TRUE\n[BST Hard Removals][Info] Running: Tree 1, nodes with 2 children; Tree removals (just removed 27); Traversal check seems to be OK\n[BST Hard Removals][Pass] Points 7 ==> 8 (1): Tree 1, nodes with 2 children; Tree removals (just removed 27); Traversal check seems to be OK :: Award 1 points :: TRUE\n[BST Hard Removals][Info] Running: Tree 1, nodes with 2 children; Tree removals (just removed 13); Traversal check seems to be OK\n[BST Hard Removals][Pass] Points 8 ==> 9 (1): Tree 1, nodes with 2 children; Tree removals (just removed 13); Traversal check seems to be OK :: Award 1 points :: TRUE\n[BST Hard Removals][Info] Running: Tree 1, nodes with 2 children; Tree removals; Seemed to succeed\n[BST Hard Removals][Pass] Points 9 ==> 10 (1): Tree 1, nodes with 2 children; Tree removals; Seemed to succeed :: Award 1 points :: TRUE\n[BST Hard Removals][Info] Running: Tree 2, random nodes; Tree removals (just removed 21); Traversal check seems to be OK\n[BST Hard Removals][Pass] Points 10 ==> 11 (1): Tree 2, random nodes; Tree removals (just removed 21); Traversal check seems to be OK :: Award 1 points :: TRUE\n[BST Hard Removals][Info] Running: Tree 2, random nodes; Tree removals (just removed 78); Traversal check seems to be OK\n[BST Hard Removals][Pass] Points 11 ==> 12 (1): Tree 2, random nodes; Tree removals (just removed 78); Traversal check seems to be OK :: Award 1 points :: TRUE\n[BST Hard Removals][Info] Running: Tree 2, random nodes; Tree removals (just removed 9); Traversal check seems to be OK\n[BST Hard Removals][Pass] Points 12 ==> 13 (1): Tree 2, random nodes; Tree removals (just removed 9); Traversal check seems to be OK :: Award 1 points :: TRUE\n[BST Hard Removals][Info] Running: Tree 2, random nodes; Tree removals (just removed 51); Traversal check seems to be OK\n[BST Hard Removals][Pass] Points 13 ==> 14 (1): Tree 2, random nodes; Tree removals (just removed 51); Traversal check seems to be OK :: Award 1 points :: TRUE\n[BST Hard Removals][Info] Running: Tree 2, random nodes; Tree removals (just removed 45); Traversal check seems to be OK\n[BST Hard Removals][Pass] Points 14 ==> 15 (1): Tree 2, random nodes; Tree removals (just removed 45); Traversal check seems to be OK :: Award 1 points :: TRUE\n[BST Hard Removals][Info] Running: Tree 2, random nodes; Tree removals (just removed 55); Traversal check seems to be OK\n[BST Hard Removals][Pass] Points 15 ==> 16 (1): Tree 2, random nodes; Tree removals (just removed 55); Traversal check seems to be OK :: Award 1 points :: TRUE\n[BST Hard Removals][Info] Running: Tree 2, random nodes; Tree removals; Seemed to succeed\n[BST Hard Removals][Pass] Points 16 ==> 17 (1): Tree 2, random nodes; Tree removals; Seemed to succeed :: Award 1 points :: TRUE\n[BST Hard Removals][Info] Running: Check height of initial tree\n[BST Hard Removals][Pass] Points 17 ==> 18 (1): Check height of initial tree :: Award 1 points\n[BST Hard Removals][Info] Running: Check height of tree after random removals\n[BST Hard Removals][Pass] Points 18 ==> 19 (1): Check height of tree after random removals :: Award 1 points\n",
         "score": 5
      },
      {
         "max_score": 5,
         "name": "BST Clear",
         "output": "[BST Clear][Info] Setting fixed points possible to 3\n[BST Clear][Info] Running: Checking clear\n[BST Clear][Pass] Points 0 ==> 1 (1): Checking clear :: Award 1 points :: Did not catch exception\n[BST Clear][Info] Running: Check newly built tree that was previously clear()'ed; tree topology; Check size = 25\n[BST Clear][Pass] Points 1 ==> 2 (1): Check newly built tree that was previously clear()'ed; tree topology; Check size = 25 :: Award 1 points\n[BST Clear][Info] Running: Check newly built tree that was previously clear()'ed; tree topology; Check valid topology\n[BST Clear][Pass] Points 2 ==> 3 (1): Check newly built tree that was previously clear()'ed; tree topology; Check valid topology :: Award 1 points :: TRUE\n",
         "score": 5
      },
      {
         "max_score": 5,
         "name": "BST Hard Operators",
         "output": "[BST Hard Operators][Info] Setting fixed points possible to 64\n[BST Hard Operators][Info] Running: Larger trees with hard operator testing\n[BST Hard Operators][Pass] Points 0 ==> 1 (1): Larger trees with hard operator testing :: Award 1 points :: Did not catch exception\n[BST Hard Operators][Info] Running: Larger trees with hard operator testing\n[BST Hard Operators][Pass] Points 1 ==> 2 (1): Larger trees with hard operator testing :: Award 1 points :: Did not catch exception\n[BST Hard Operators][Info] Running: [Hard operator tests] Assignment after declaration; Trees should be equal\n[BST Hard Operators][Pass] Points 2 ==> 3 (1): [Hard operator tests] Assignment after declaration; Trees should be equal :: Award 1 points :: TRUE\n[BST Hard Operators][Info] Running: [Hard operator tests] Assignment after declaration; Trees should not be unequal\n[BST Hard Operators][Pass] Points 3 ==> 4 (1): [Hard operator tests] Assignment after declaration; Trees should not be unequal :: Award 1 points :: FALSE\n[BST Hard Operators][Info] Running: [Hard operator tests] Assignment after declaration; Trees should be not be equal after altering second tree\n[BST Hard Operators][Pass] Points 4 ==> 5 (1): [Hard operator tests] Assignment after declaration; Trees should be not be equal after altering second tree :: Award 1 points :: FALSE\n[BST Hard Operators][Info] Running: [Hard operator tests] Assignment after declaration; Trees should be unequal after altering second tree\n[BST Hard Operators][Pass] Points 5 ==> 6 (1): [Hard operator tests] Assignment after declaration; Trees should be unequal after altering second tree :: Award 1 points :: TRUE\n[BST Hard Operators][Info] Running: [Hard operator tests] Copy CTOR; Trees should be equal\n[BST Hard Operators][Pass] Points 6 ==> 7 (1): [Hard operator tests] Copy CTOR; Trees should be equal :: Award 1 points :: TRUE\n[BST Hard Operators][Info] Running: [Hard operator tests] Copy CTOR; Trees should not be unequal\n[BST Hard Operators][Pass] Points 7 ==> 8 (1): [Hard operator tests] Copy CTOR; Trees should not be unequal :: Award 1 points :: FALSE\n[BST Hard Operators][Info] Running: [Hard operator tests] Copy CTOR; Trees should be not be equal after altering second tree (ptr stealing?)\n[BST Hard Operators][Pass] Points 8 ==> 9 (1): [Hard operator tests] Copy CTOR; Trees should be not be equal after altering second tree (ptr stealing?) :: Award 1 points :: FALSE\n[BST Hard Operators][Info] Running: [Hard operator tests] Copy CTOR; Trees should be unequal after altering second tree (ptr stealing?)\n[BST Hard Operators][Pass] Points 9 ==> 10 (1): [Hard operator tests] Copy CTOR; Trees should be unequal after altering second tree (ptr stealing?) :: Award 1 points :: TRUE\n[BST Hard Operators][Info] Running: [Hard operator tests] Assignment during declaration (Copy CTOR); Trees should be equal\n[BST Hard Operators][Pass] Points 10 ==> 11 (1): [Hard operator tests] Assignment during declaration (Copy CTOR); Trees should be equal :: Award 1 points :: TRUE\n[BST Hard Operators][Info] Running: [Hard operator tests] Assignment during declaration (Copy CTOR); Trees should not be unequal\n[BST Hard Operators][Pass] Points 11 ==> 12 (1): [Hard operator tests] Assignment during declaration (Copy CTOR); Trees should not be unequal :: Award 1 points :: FALSE\n[BST Hard Operators][Info] Running: [Hard operator tests] Assignment during declaration (Copy CTOR); Trees should be not be equal after altering assigned tree\n[BST Hard Operators][Pass] Points 12 ==> 13 (1): [Hard operator tests] Assignment during declaration (Copy CTOR); Trees should be not be equal after altering assigned tree :: Award 1 points :: FALSE\n[BST Hard Operators][Info] Running: [Hard operator tests] Assignment during declaration (Copy CTOR); Trees should be unequal after altering assigned tree\n[BST Hard Operators][Pass] Points 13 ==> 14 (1): [Hard operator tests] Assignment during declaration (Copy CTOR); Trees should be unequal after altering assigned tree :: Award 1 points :: TRUE\n[BST Hard Operators][Info] Running: [Hard operator tests] Assignment after declaration; Trees should be equal\n[BST Hard Operators][Pass] Points 14 ==> 15 (1): [Hard operator tests] Assignment after declaration; Trees should be equal :: Award 1 points :: TRUE\n[BST Hard Operators][Info] Running: [Hard operator tests] Assignment after declaration; Trees should not be unequal\n[BST Hard Operators][Pass] Points 15 ==> 16 (1): [Hard operator tests] Assignment after declaration; Trees should not be unequal :: Award 1 points :: FALSE\n[BST Hard Operators][Info] Running: [Hard operator tests] Assignment after declaration; Trees should be not be equal after altering second tree\n[BST Hard Operators][Pass] Points 16 ==> 17 (1): [Hard operator tests] Assignment after declaration; Trees should be not be equal after altering second tree :: Award 1 points :: FALSE\n[BST Hard Operators][Info] Running: [Hard operator tests] Assignment after declaration; Trees should be unequal after altering second tree\n[BST Hard Operators][Pass] Points 17 ==> 18 (1): [Hard operator tests] Assignment after declaration; Trees should be unequal after altering second tree :: Award 1 points :: TRUE\n[BST Hard Operators][Info] Running: [Hard operator tests] Copy CTOR; Trees should be equal\n[BST Hard Operators][Pass] Points 18 ==> 19 (1): [Hard operator tests] Copy CTOR; Trees should be equal :: Award 1 points :: TRUE\n[BST Hard Operators][Info] Running: [Hard operator tests] Copy CTOR; Trees should not be unequal\n[BST Hard Operators][Pass] Points 19 ==> 20 (1): [Hard operator tests] Copy CTOR; Trees should not be unequal :: Award 1 points :: FALSE\n[BST Hard Operators][Info] Running: [Hard operator tests] Copy CTOR; Trees should be not be equal after altering second tree (ptr stealing?)\n[BST Hard Operators][Pass] Points 20 ==> 21 (1): [Hard operator tests] Copy CTOR; Trees should be not be equal after altering second tree (ptr stealing?) :: Award 1 points :: FALSE\n[BST Hard Operators][Info] Running: [Hard operator tests] Copy CTOR; Trees should be unequal after altering second tree (ptr stealing?)\n[BST Hard Operators][Pass] Points 21 ==> 22 (1): [Hard operator tests] Copy CTOR; Trees should be unequal after altering second tree (ptr stealing?) :: Award 1 points :: TRUE\n[BST Hard Operators][Info] Running: [Hard operator tests] Assignment during declaration (Copy CTOR); Trees should be equal\n[BST Hard Operators][Pass] Points 22 ==> 23 (1): [Hard operator tests] Assignment during declaration (Copy CTOR); Trees should be equal :: Award 1 points :: TRUE\n[BST Hard Operators][Info] Running: [Hard operator tests] Assignment during declaration (Copy CTOR); Trees should not be unequal\n[BST Hard Operators][Pass] Points 23 ==> 24 (1): [Hard operator tests] Assignment during declaration (Copy CTOR); Trees should not be unequal :: Award 1 points :: FALSE\n[BST Hard Operators][Info] Running: [Hard operator tests] Assignment during declaration (Copy CTOR); Trees should be not be equal after altering assigned tree\n[BST Hard Operators][Pass] Points 24 ==> 25 (1): [Hard operator tests] Assignment during declaration (Copy CTOR); Trees should be not be equal after altering assigned tree :: Award 1 points :: FALSE\n[BST Hard Operators][Info] Running: [Hard operator tests] Assignment during declaration (Copy CTOR); Trees should be unequal after altering assigned tree\n[BST Hard Operators][Pass] Points 25 ==> 26 (1): [Hard operator tests] Assignment during declaration (Copy CTOR); Trees should be unequal after altering assigned tree :: Award 1 points :: TRUE\n[BST Hard Operators][Info] Running: [Hard operator tests] Assignment after declaration; Trees should be equal\n[BST Hard Operators][Pass] Points 26 ==> 27 (1): [Hard operator tests] Assignment after declaration; Trees should be equal :: Award 1 points :: TRUE\n[BST Hard Operators][Info] Running: [Hard operator tests] Assignment after declaration; Trees should not be unequal\n[BST Hard Operators][Pass] Points 27 ==> 28 (1): [Hard operator tests] Assignment after declaration; Trees should not be unequal :: Award 1 points :: FALSE\n[BST Hard Operators][Info] Running: [Hard operator tests] Assignment after declaration; Trees should be not be equal after altering second tree\n[BST Hard Operators][Pass] Points 28 ==> 29 (1): [Hard operator tests] Assignment after declaration; Trees should be not be equal after altering second tree :: Award 1 points :: FALSE\n[BST Hard Operators][Info] Running: [Hard operator tests] Assignment after declaration; Trees should be unequal after altering second tree\n[BST Hard Operators][Pass] Points 29 ==> 30 (1): [Hard operator tests] Assignment after declaration; Trees should be unequal after altering second tree :: Award 1 points :: TRUE\n[BST Hard Operators][Info] Running: [Hard operator tests] Copy CTOR; Trees should be equal\n[BST Hard Operators][Pass] Points 30 ==> 31 (1): [Hard operator tests] Copy CTOR; Trees should be equal :: Award 1 points :: TRUE\n[BST Hard Operators][Info] Running: [Hard operator tests] Copy CTOR; Trees should not be unequal\n[BST Hard Operators][Pass] Points 31 ==> 32 (1): [Hard operator tests] Copy CTOR; Trees should not be unequal :: Award 1 points :: FALSE\n[BST Hard Operators][Info] Running: [Hard operator tests] Copy CTOR; Trees should be not be equal after altering second tree (ptr stealing?)\n[BST Hard Operators][Pass] Points 32 ==> 33 (1): [Hard operator tests] Copy CTOR; Trees should be not be equal after altering second tree (ptr stealing?) :: Award 1 points :: FALSE\n[BST Hard Operators][Info] Running: [Hard operator tests] Copy CTOR; Trees should be unequal after altering second tree (ptr stealing?)\n[BST Hard Operators][Pass] Points 33 ==> 34 (1): [Hard operator tests] Copy CTOR; Trees should be unequal after altering second tree (ptr stealing?) :: Award 1 points :: TRUE\n[BST Hard Operators][Info] Running: [Hard operator tests] Assignment during declaration (Copy CTOR); Trees should be equal\n[BST Hard Operators][Pass] Points 34 ==> 35 (1): [Hard operator tests] Assignment during declaration (Copy CTOR); Trees should be equal :: Award 1 points :: TRUE\n[BST Hard Operators][Info] Running: [Hard operator tests] Assignment during declaration (Copy CTOR); Trees should not be unequal\n[BST Hard Operators][Pass] Points 35 ==> 36 (1): [Hard operator tests] Assignment during declaration (Copy CTOR); Trees should not be unequal :: Award 1 points :: FALSE\n[BST Hard Operators][Info] Running: [Hard operator tests] Assignment during declaration (Copy CTOR); Trees should be not be equal after altering assigned tree\n[BST Hard Operators][Pass] Points 36 ==> 37 (1): [Hard operator tests] Assignment during declaration (Copy CTOR); Trees should be not be equal after altering assigned tree :: Award 1 points :: FALSE\n[BST Hard Operators][Info] Running: [Hard operator tests] Assignment during declaration (Copy CTOR); Trees should be unequal after altering assigned tree\n[BST Hard Operators][Pass] Points 37 ==> 38 (1): [Hard operator tests] Assignment during declaration (Copy CTOR); Trees should be unequal after altering assigned tree :: Award 1 points :: TRUE\n[BST Hard Operators][Info] Running: [Hard operator tests] Assignment after declaration; Trees should be equal\n[BST Hard Operators][Pass] Points 38 ==> 39 (1): [Hard operator tests] Assignment after declaration; Trees should be equal :: Award 1 points :: TRUE\n[BST Hard Operators][Info] Running: [Hard operator tests] Assignment after declaration; Trees should not be unequal\n[BST Hard Operators][Pass] Points 39 ==> 40 (1): [Hard operator tests] Assignment after declaration; Trees should not be unequal :: Award 1 points :: FALSE\n[BST Hard Operators][Info] Running: [Hard operator tests] Assignment after declaration; Trees should be not be equal after altering second tree\n[BST Hard Operators][Pass] Points 40 ==> 41 (1): [Hard operator tests] Assignment after declaration; Trees should be not be equal after altering second tree :: Award 1 points :: FALSE\n[BST Hard Operators][Info] Running: [Hard operator tests] Assignment after declaration; Trees should be unequal after altering second tree\n[BST Hard Operators][Pass] Points 41 ==> 42 (1): [Hard operator tests] Assignment after declaration; Trees should be unequal after altering second tree :: Award 1 points :: TRUE\n[BST Hard Operators][Info] Running: [Hard operator tests] Copy CTOR; Trees should be equal\n[BST Hard Operators][Pass] Points 42 ==> 43 (1): [Hard operator tests] Copy CTOR; Trees should be equal :: Award 1 points :: TRUE\n[BST Hard Operators][Info] Running: [Hard operator tests] Copy CTOR; Trees should not be unequal\n[BST Hard Operators][Pass] Points 43 ==> 44 (1): [Hard operator tests] Copy CTOR; Trees should not be unequal :: Award 1 points :: FALSE\n[BST Hard Operators][Info] Running: [Hard operator tests] Copy CTOR; Trees should be not be equal after altering second tree (ptr stealing?)\n[BST Hard Operators][Pass] Points 44 ==> 45 (1): [Hard operator tests] Copy CTOR; Trees should be not be equal after altering second tree (ptr stealing?) :: Award 1 points :: FALSE\n[BST Hard Operators][Info] Running: [Hard operator tests] Copy CTOR; Trees should be unequal after altering second tree (ptr stealing?)\n[BST Hard Operators][Pass] Points 45 ==> 46 (1): [Hard operator tests] Copy CTOR; Trees should be unequal after altering second tree (ptr stealing?) :: Award 1 points :: TRUE\n[BST Hard Operators][Info] Running: [Hard operator tests] Assignment during declaration (Copy CTOR); Trees should be equal\n[BST Hard Operators][Pass] Points 46 ==> 47 (1): [Hard operator tests] Assignment during declaration (Copy CTOR); Trees should be equal :: Award 1 points :: TRUE\n[BST Hard Operators][Info] Running: [Hard operator tests] Assignment during declaration (Copy CTOR); Trees should not be unequal\n[BST Hard Operators][Pass] Points 47 ==> 48 (1): [Hard operator tests] Assignment during declaration (Copy CTOR); Trees should not be unequal :: Award 1 points :: FALSE\n[BST Hard Operators][Info] Running: [Hard operator tests] Assignment during declaration (Copy CTOR); Trees should be not be equal after altering assigned tree\n[BST Hard Operators][Pass] Points 48 ==> 49 (1): [Hard operator tests] Assignment during declaration (Copy CTOR); Trees should be not be equal after altering assigned tree :: Award 1 points :: FALSE\n[BST Hard Operators][Info] Running: [Hard operator tests] Assignment during declaration (Copy CTOR); Trees should be unequal after altering assigned tree\n[BST Hard Operators][Pass] Points 49 ==> 50 (1): [Hard operator tests] Assignment during declaration (Copy CTOR); Trees should be unequal after altering assigned tree :: Award 1 points :: TRUE\n[BST Hard Operators][Info] Running: [Hard operator tests] Assignment after declaration; Trees should be equal\n[BST Hard Operators][Pass] Points 50 ==> 51 (1): [Hard operator tests] Assignment after declaration; Trees should be equal :: Award 1 points :: TRUE\n[BST Hard Operators][Info] Running: [Hard operator tests] Assignment after declaration; Trees should not be unequal\n[BST Hard Operators][Pass] Points 51 ==> 52 (1): [Hard operator tests] Assignment after declaration; Trees should not be unequal :: Award 1 points :: FALSE\n[BST Hard Operators][Info] Running: [Hard operator tests] Assignment after declaration; Trees should be not be equal after altering second tree\n[BST Hard Operators][Pass] Points 52 ==> 53 (1): [Hard operator tests] Assignment after declaration; Trees should be not be equal after altering second tree :: Award 1 points :: FALSE\n[BST Hard Operators][Info] Running: [Hard operator tests] Assignment after declaration; Trees should be unequal after altering second tree\n[BST Hard Operators][Pass] Points 53 ==> 54 (1): [Hard operator tests] Assignment after declaration; Trees should be unequal after altering second tree :: Award 1 points :: TRUE\n[BST Hard Operators][Info] Running: [Hard operator tests] Copy CTOR; Trees should be equal\n[BST Hard Operators][Pass] Points 54 ==> 55 (1): [Hard operator tests] Copy CTOR; Trees should be equal :: Award 1 points :: TRUE\n[BST Hard Operators][Info] Running: [Hard operator tests] Copy CTOR; Trees should not be unequal\n[BST Hard Operators][Pass] Points 55 ==> 56 (1): [Hard operator tests] Copy CTOR; Trees should not be unequal :: Award 1 points :: FALSE\n[BST Hard Operators][Info] Running: [Hard operator tests] Copy CTOR; Trees should be not be equal after altering second tree (ptr stealing?)\n[BST Hard Operators][Pass] Points 56 ==> 57 (1): [Hard operator tests] Copy CTOR; Trees should be not be equal after altering second tree (ptr stealing?) :: Award 1 points :: FALSE\n[BST Hard Operators][Info] Running: [Hard operator tests] Copy CTOR; Trees should be unequal after altering second tree (ptr stealing?)\n[BST Hard Operators][Pass] Points 57 ==> 58 (1): [Hard operator tests] Copy CTOR; Trees should be unequal after altering second tree (ptr stealing?) :: Award 1 points :: TRUE\n[BST Hard Operators][Info] Running: [Hard operator tests] Assignment during declaration (Copy CTOR); Trees should be equal\n[BST Hard Operators][Pass] Points 58 ==> 59 (1): [Hard operator tests] Assignment during declaration (Copy CTOR); Trees should be equal :: Award 1 points :: TRUE\n[BST Hard Operators][Info] Running: [Hard operator tests] Assignment during declaration (Copy CTOR); Trees should not be unequal\n[BST Hard Operators][Pass] Points 59 ==> 60 (1): [Hard operator tests] Assignment during declaration (Copy CTOR); Trees should not be unequal :: Award 1 points :: FALSE\n[BST Hard Operators][Info] Running: [Hard operator tests] Assignment during declaration (Copy CTOR); Trees should be not be equal after altering assigned tree\n[BST Hard Operators][Pass] Points 60 ==> 61 (1): [Hard operator tests] Assignment during declaration (Copy CTOR); Trees should be not be equal after altering assigned tree :: Award 1 points :: FALSE\n[BST Hard Operators][Info] Running: [Hard operator tests] Assignment during declaration (Copy CTOR); Trees should be unequal after altering assigned tree\n[BST Hard Operators][Pass] Points 61 ==> 62 (1): [Hard operator tests] Assignment during declaration (Copy CTOR); Trees should be unequal after altering assigned tree :: Award 1 points :: TRUE\n[BST Hard Operators][Info] Running: Tree should have size=0 after DTOR\n[BST Hard Operators][Pass] Points 62 ==> 63 (1): Tree should have size=0 after DTOR :: Award 1 points\n[BST Hard Operators][Info] Running: Tree should be empty after DTOR\n[BST Hard Operators][Pass] Points 63 ==> 64 (1): Tree should be empty after DTOR :: Award 1 points :: TRUE\n",
         "score": 5
      },
      {
         "max_score": 5,
         "name": "BST Exceptions",
         "output": "[BST Exceptions][Info] Setting fixed points possible to 3\n[BST Exceptions][Info] Running: Find'ing non-existant node should throw ValueNotFoundError\n[BST Exceptions][Pass] Points 0 ==> 1 (1): Find'ing non-existant node should throw ValueNotFoundError :: Award 1 points :: Caught correct exception (N7CPSC1313BST18ValueNotFoundErrorE) :: Value not found in tree\n[BST Exceptions][Info] Running: Removing non-existant node should throw ValueNotFoundError\n[BST Exceptions][Pass] Points 1 ==> 2 (1): Removing non-existant node should throw ValueNotFoundError :: Award 1 points :: Caught correct exception (N7CPSC1313BST18ValueNotFoundErrorE) :: Value not found in tree\n[BST Exceptions][Info] Running: Adding duplicate data should throw ValueExistsError\n[BST Exceptions][Pass] Points 2 ==> 3 (1): Adding duplicate data should throw ValueExistsError :: Award 1 points :: Caught correct exception (N7CPSC1313BST16ValueExistsErrorE) :: Value already exists in tree\n",
         "score": 5
      },
      {
         "max_score": 5,
         "name": "BST Complexity",
         "output": "[BST Complexity][Info] Setting fixed points possible to 5\n[BST Complexity][Info] Running: Insert/Exists/Remove complexity test\n[BST Complexity][Info] Populating tree data into a vector first.\n[BST Complexity][Info] Testing BST time complexity by inserting 1000000 items.\n[BST Complexity][Info] Testing BST time complexity by searching for all 1000000 items.\n[BST Complexity][Info] Testing BST time complexity by searching for 1000000 non-existent numbers.\n[BST Complexity][Info] Testing BST time complexity by removing each item, one by one.\n[BST Complexity][Pass] Points 0 ==> 1 (1): Insert/Exists/Remove complexity test :: Award 1 points :: Did not catch exception\n[BST Complexity][Info] Running: If we get this far, the insert complexity test didn't timeout.\n[BST Complexity][Pass] Points 1 ==> 2 (1): If we get this far, the insert complexity test didn't timeout. :: Award 1 points :: TRUE\n[BST Complexity][Info] Running: If we get this far, the exists complexity test didn't timeout.\n[BST Complexity][Pass] Points 2 ==> 3 (1): If we get this far, the exists complexity test didn't timeout. :: Award 1 points :: TRUE\n[BST Complexity][Info] Running: If we get this far, the exists (non-existent) complexity test didn't timeout.\n[BST Complexity][Pass] Points 3 ==> 4 (1): If we get this far, the exists (non-existent) complexity test didn't timeout. :: Award 1 points :: TRUE\n[BST Complexity][Info] Running: If we get this far, the remove complexity test didn't timeout.\n[BST Complexity][Pass] Points 4 ==> 5 (1): If we get this far, the remove complexity test didn't timeout. :: Award 1 points :: TRUE\n",
         "score": 5
      },
      {
         "max_score": 5,
         "name": "Dino DB",
         "output": "[Dino DB][Info] Setting fixed points possible to 93\n[Dino DB][Info] Running: Checking dino database\n[Dino DB][Info] Now checking the Dinosaur Database.\n[Dino DB][Info] Don't forget these tests also depend on correctly implemented operator overloads.\n[Dino DB][Pass] Points 0 ==> 1 (1): Checking dino database :: Award 1 points :: Did not catch exception\n[Dino DB][Info] Running: Expected dinosaur tyrannosaurus should exist\n[Dino DB][Pass] Points 1 ==> 2 (1): Expected dinosaur tyrannosaurus should exist :: Award 1 points :: TRUE\n[Dino DB][Info] Running: Found dino should have correct name\n[Dino DB][Pass] Points 2 ==> 3 (1): Found dino should have correct name :: Award 1 points\n[Dino DB][Info] Running: Found dino should have the correct ID\n[Dino DB][Pass] Points 3 ==> 4 (1): Found dino should have the correct ID :: Award 1 points\n[Dino DB][Info] Running: Expected dinosaur nothronychus should exist\n[Dino DB][Pass] Points 4 ==> 5 (1): Expected dinosaur nothronychus should exist :: Award 1 points :: TRUE\n[Dino DB][Info] Running: Found dino should have correct name\n[Dino DB][Pass] Points 5 ==> 6 (1): Found dino should have correct name :: Award 1 points\n[Dino DB][Info] Running: Found dino should have the correct ID\n[Dino DB][Pass] Points 6 ==> 7 (1): Found dino should have the correct ID :: Award 1 points\n[Dino DB][Info] Running: Expected dinosaur compsognathus should exist\n[Dino DB][Pass] Points 7 ==> 8 (1): Expected dinosaur compsognathus should exist :: Award 1 points :: TRUE\n[Dino DB][Info] Running: Found dino should have correct name\n[Dino DB][Pass] Points 8 ==> 9 (1): Found dino should have correct name :: Award 1 points\n[Dino DB][Info] Running: Found dino should have the correct ID\n[Dino DB][Pass] Points 9 ==> 10 (1): Found dino should have the correct ID :: Award 1 points\n[Dino DB][Info] Running: Expected dinosaur albertaceratops should exist\n[Dino DB][Pass] Points 10 ==> 11 (1): Expected dinosaur albertaceratops should exist :: Award 1 points :: TRUE\n[Dino DB][Info] Running: Found dino should have correct name\n[Dino DB][Pass] Points 11 ==> 12 (1): Found dino should have correct name :: Award 1 points\n[Dino DB][Info] Running: Found dino should have the correct ID\n[Dino DB][Pass] Points 12 ==> 13 (1): Found dino should have the correct ID :: Award 1 points\n[Dino DB][Info] Running: Expected dinosaur homalocephale should exist\n[Dino DB][Pass] Points 13 ==> 14 (1): Expected dinosaur homalocephale should exist :: Award 1 points :: TRUE\n[Dino DB][Info] Running: Found dino should have correct name\n[Dino DB][Pass] Points 14 ==> 15 (1): Found dino should have correct name :: Award 1 points\n[Dino DB][Info] Running: Found dino should have the correct ID\n[Dino DB][Pass] Points 15 ==> 16 (1): Found dino should have the correct ID :: Award 1 points\n[Dino DB][Info] Running: Expected dinosaur amygdalodon should exist\n[Dino DB][Pass] Points 16 ==> 17 (1): Expected dinosaur amygdalodon should exist :: Award 1 points :: TRUE\n[Dino DB][Info] Running: Found dino should have correct name\n[Dino DB][Pass] Points 17 ==> 18 (1): Found dino should have correct name :: Award 1 points\n[Dino DB][Info] Running: Found dino should have the correct ID\n[Dino DB][Pass] Points 18 ==> 19 (1): Found dino should have the correct ID :: Award 1 points\n[Dino DB][Info] Running: Expected dinosaur coelurus should exist\n[Dino DB][Pass] Points 19 ==> 20 (1): Expected dinosaur coelurus should exist :: Award 1 points :: TRUE\n[Dino DB][Info] Running: Found dino should have correct name\n[Dino DB][Pass] Points 20 ==> 21 (1): Found dino should have correct name :: Award 1 points\n[Dino DB][Info] Running: Found dino should have the correct ID\n[Dino DB][Pass] Points 21 ==> 22 (1): Found dino should have the correct ID :: Award 1 points\n[Dino DB][Info] Running: Expected dinosaur tenontosaurus should exist\n[Dino DB][Pass] Points 22 ==> 23 (1): Expected dinosaur tenontosaurus should exist :: Award 1 points :: TRUE\n[Dino DB][Info] Running: Found dino should have correct name\n[Dino DB][Pass] Points 23 ==> 24 (1): Found dino should have correct name :: Award 1 points\n[Dino DB][Info] Running: Found dino should have the correct ID\n[Dino DB][Pass] Points 24 ==> 25 (1): Found dino should have the correct ID :: Award 1 points\n[Dino DB][Info] Running: Expected dinosaur agilisaurus should exist\n[Dino DB][Pass] Points 25 ==> 26 (1): Expected dinosaur agilisaurus should exist :: Award 1 points :: TRUE\n[Dino DB][Info] Running: Found dino should have correct name\n[Dino DB][Pass] Points 26 ==> 27 (1): Found dino should have correct name :: Award 1 points\n[Dino DB][Info] Running: Found dino should have the correct ID\n[Dino DB][Pass] Points 27 ==> 28 (1): Found dino should have the correct ID :: Award 1 points\n[Dino DB][Info] Running: Expected dinosaur torvosaurus should exist\n[Dino DB][Pass] Points 28 ==> 29 (1): Expected dinosaur torvosaurus should exist :: Award 1 points :: TRUE\n[Dino DB][Info] Running: Found dino should have correct name\n[Dino DB][Pass] Points 29 ==> 30 (1): Found dino should have correct name :: Award 1 points\n[Dino DB][Info] Running: Found dino should have the correct ID\n[Dino DB][Pass] Points 30 ==> 31 (1): Found dino should have the correct ID :: Award 1 points\n[Dino DB][Info] Running: Expected dinosaur vulcanodon should exist\n[Dino DB][Pass] Points 31 ==> 32 (1): Expected dinosaur vulcanodon should exist :: Award 1 points :: TRUE\n[Dino DB][Info] Running: Found dino should have correct name\n[Dino DB][Pass] Points 32 ==> 33 (1): Found dino should have correct name :: Award 1 points\n[Dino DB][Info] Running: Found dino should have the correct ID\n[Dino DB][Pass] Points 33 ==> 34 (1): Found dino should have the correct ID :: Award 1 points\n[Dino DB][Info] Running: Expected dinosaur brachiosaurus should exist\n[Dino DB][Pass] Points 34 ==> 35 (1): Expected dinosaur brachiosaurus should exist :: Award 1 points :: TRUE\n[Dino DB][Info] Running: Found dino should have correct name\n[Dino DB][Pass] Points 35 ==> 36 (1): Found dino should have correct name :: Award 1 points\n[Dino DB][Info] Running: Found dino should have the correct ID\n[Dino DB][Pass] Points 36 ==> 37 (1): Found dino should have the correct ID :: Award 1 points\n[Dino DB][Info] Running: Expected dinosaur mussaurus should exist\n[Dino DB][Pass] Points 37 ==> 38 (1): Expected dinosaur mussaurus should exist :: Award 1 points :: TRUE\n[Dino DB][Info] Running: Found dino should have correct name\n[Dino DB][Pass] Points 38 ==> 39 (1): Found dino should have correct name :: Award 1 points\n[Dino DB][Info] Running: Found dino should have the correct ID\n[Dino DB][Pass] Points 39 ==> 40 (1): Found dino should have the correct ID :: Award 1 points\n[Dino DB][Info] Running: Expected dinosaur citipati should exist\n[Dino DB][Pass] Points 40 ==> 41 (1): Expected dinosaur citipati should exist :: Award 1 points :: TRUE\n[Dino DB][Info] Running: Found dino should have correct name\n[Dino DB][Pass] Points 41 ==> 42 (1): Found dino should have correct name :: Award 1 points\n[Dino DB][Info] Running: Found dino should have the correct ID\n[Dino DB][Pass] Points 42 ==> 43 (1): Found dino should have the correct ID :: Award 1 points\n[Dino DB][Info] Running: Expected dinosaur procompsognathus should exist\n[Dino DB][Pass] Points 43 ==> 44 (1): Expected dinosaur procompsognathus should exist :: Award 1 points :: TRUE\n[Dino DB][Info] Running: Found dino should have correct name\n[Dino DB][Pass] Points 44 ==> 45 (1): Found dino should have correct name :: Award 1 points\n[Dino DB][Info] Running: Found dino should have the correct ID\n[Dino DB][Pass] Points 45 ==> 46 (1): Found dino should have the correct ID :: Award 1 points\n[Dino DB][Info] Running: Expected dinosaur brachylophosaurus should exist\n[Dino DB][Pass] Points 46 ==> 47 (1): Expected dinosaur brachylophosaurus should exist :: Award 1 points :: TRUE\n[Dino DB][Info] Running: Found dino should have correct name\n[Dino DB][Pass] Points 47 ==> 48 (1): Found dino should have correct name :: Award 1 points\n[Dino DB][Info] Running: Found dino should have the correct ID\n[Dino DB][Pass] Points 48 ==> 49 (1): Found dino should have the correct ID :: Award 1 points\n[Dino DB][Info] Running: Expected dinosaur lesothosaurus should exist\n[Dino DB][Pass] Points 49 ==> 50 (1): Expected dinosaur lesothosaurus should exist :: Award 1 points :: TRUE\n[Dino DB][Info] Running: Found dino should have correct name\n[Dino DB][Pass] Points 50 ==> 51 (1): Found dino should have correct name :: Award 1 points\n[Dino DB][Info] Running: Found dino should have the correct ID\n[Dino DB][Pass] Points 51 ==> 52 (1): Found dino should have the correct ID :: Award 1 points\n[Dino DB][Info] Running: Expected dinosaur mussaurus should exist\n[Dino DB][Pass] Points 52 ==> 53 (1): Expected dinosaur mussaurus should exist :: Award 1 points :: TRUE\n[Dino DB][Info] Running: Found dino should have correct name\n[Dino DB][Pass] Points 53 ==> 54 (1): Found dino should have correct name :: Award 1 points\n[Dino DB][Info] Running: Found dino should have the correct ID\n[Dino DB][Pass] Points 54 ==> 55 (1): Found dino should have the correct ID :: Award 1 points\n[Dino DB][Info] Running: Expected dinosaur coloradisaurus should exist\n[Dino DB][Pass] Points 55 ==> 56 (1): Expected dinosaur coloradisaurus should exist :: Award 1 points :: TRUE\n[Dino DB][Info] Running: Found dino should have correct name\n[Dino DB][Pass] Points 56 ==> 57 (1): Found dino should have correct name :: Award 1 points\n[Dino DB][Info] Running: Found dino should have the correct ID\n[Dino DB][Pass] Points 57 ==> 58 (1): Found dino should have the correct ID :: Award 1 points\n[Dino DB][Info] Running: Expected dinosaur brachylophosaurus should exist\n[Dino DB][Pass] Points 58 ==> 59 (1): Expected dinosaur brachylophosaurus should exist :: Award 1 points :: TRUE\n[Dino DB][Info] Running: Found dino should have correct name\n[Dino DB][Pass] Points 59 ==> 60 (1): Found dino should have correct name :: Award 1 points\n[Dino DB][Info] Running: Found dino should have the correct ID\n[Dino DB][Pass] Points 60 ==> 61 (1): Found dino should have the correct ID :: Award 1 points\n[Dino DB][Info] Running: Expected dinosaur micropachycephalosaurus should exist\n[Dino DB][Pass] Points 61 ==> 62 (1): Expected dinosaur micropachycephalosaurus should exist :: Award 1 points :: TRUE\n[Dino DB][Info] Running: Found dino should have correct name\n[Dino DB][Pass] Points 62 ==> 63 (1): Found dino should have correct name :: Award 1 points\n[Dino DB][Info] Running: Found dino should have the correct ID\n[Dino DB][Pass] Points 63 ==> 64 (1): Found dino should have the correct ID :: Award 1 points\n[Dino DB][Info] Running: Expected dinosaur rinchenia should exist\n[Dino DB][Pass] Points 64 ==> 65 (1): Expected dinosaur rinchenia should exist :: Award 1 points :: TRUE\n[Dino DB][Info] Running: Found dino should have correct name\n[Dino DB][Pass] Points 65 ==> 66 (1): Found dino should have correct name :: Award 1 points\n[Dino DB][Info] Running: Found dino should have the correct ID\n[Dino DB][Pass] Points 66 ==> 67 (1): Found dino should have the correct ID :: Award 1 points\n[Dino DB][Info] Running: Expected dinosaur gargoyleosaurus should exist\n[Dino DB][Pass] Points 67 ==> 68 (1): Expected dinosaur gargoyleosaurus should exist :: Award 1 points :: TRUE\n[Dino DB][Info] Running: Found dino should have correct name\n[Dino DB][Pass] Points 68 ==> 69 (1): Found dino should have correct name :: Award 1 points\n[Dino DB][Info] Running: Found dino should have the correct ID\n[Dino DB][Pass] Points 69 ==> 70 (1): Found dino should have the correct ID :: Award 1 points\n[Dino DB][Info] Running: Expected dinosaur aucasaurus should exist\n[Dino DB][Pass] Points 70 ==> 71 (1): Expected dinosaur aucasaurus should exist :: Award 1 points :: TRUE\n[Dino DB][Info] Running: Found dino should have correct name\n[Dino DB][Pass] Points 71 ==> 72 (1): Found dino should have correct name :: Award 1 points\n[Dino DB][Info] Running: Found dino should have the correct ID\n[Dino DB][Pass] Points 72 ==> 73 (1): Found dino should have the correct ID :: Award 1 points\n[Dino DB][Info] Running: Expected dinosaur edmontosaurus should exist\n[Dino DB][Pass] Points 73 ==> 74 (1): Expected dinosaur edmontosaurus should exist :: Award 1 points :: TRUE\n[Dino DB][Info] Running: Found dino should have correct name\n[Dino DB][Pass] Points 74 ==> 75 (1): Found dino should have correct name :: Award 1 points\n[Dino DB][Info] Running: Found dino should have the correct ID\n[Dino DB][Pass] Points 75 ==> 76 (1): Found dino should have the correct ID :: Award 1 points\n[Dino DB][Info] Running: Expected dinosaur triceratops should exist\n[Dino DB][Pass] Points 76 ==> 77 (1): Expected dinosaur triceratops should exist :: Award 1 points :: TRUE\n[Dino DB][Info] Running: Found dino should have correct name\n[Dino DB][Pass] Points 77 ==> 78 (1): Found dino should have correct name :: Award 1 points\n[Dino DB][Info] Running: Found dino should have the correct ID\n[Dino DB][Pass] Points 78 ==> 79 (1): Found dino should have the correct ID :: Award 1 points\n[Dino DB][Info] Running: Expected dinosaur chubutisaurus should exist\n[Dino DB][Pass] Points 79 ==> 80 (1): Expected dinosaur chubutisaurus should exist :: Award 1 points :: TRUE\n[Dino DB][Info] Running: Found dino should have correct name\n[Dino DB][Pass] Points 80 ==> 81 (1): Found dino should have correct name :: Award 1 points\n[Dino DB][Info] Running: Found dino should have the correct ID\n[Dino DB][Pass] Points 81 ==> 82 (1): Found dino should have the correct ID :: Award 1 points\n[Dino DB][Info] Running: Expected dinosaur lufengosaurus should exist\n[Dino DB][Pass] Points 82 ==> 83 (1): Expected dinosaur lufengosaurus should exist :: Award 1 points :: TRUE\n[Dino DB][Info] Running: Found dino should have correct name\n[Dino DB][Pass] Points 83 ==> 84 (1): Found dino should have correct name :: Award 1 points\n[Dino DB][Info] Running: Found dino should have the correct ID\n[Dino DB][Pass] Points 84 ==> 85 (1): Found dino should have the correct ID :: Award 1 points\n[Dino DB][Info] Running: Expected dinosaur bellusaurus should exist\n[Dino DB][Pass] Points 85 ==> 86 (1): Expected dinosaur bellusaurus should exist :: Award 1 points :: TRUE\n[Dino DB][Info] Running: Found dino should have correct name\n[Dino DB][Pass] Points 86 ==> 87 (1): Found dino should have correct name :: Award 1 points\n[Dino DB][Info] Running: Found dino should have the correct ID\n[Dino DB][Pass] Points 87 ==> 88 (1): Found dino should have the correct ID :: Award 1 points\n[Dino DB][Info] Running: Expected dinosaur tsintaosaurus should exist\n[Dino DB][Pass] Points 88 ==> 89 (1): Expected dinosaur tsintaosaurus should exist :: Award 1 points :: TRUE\n[Dino DB][Info] Running: Found dino should have correct name\n[Dino DB][Pass] Points 89 ==> 90 (1): Found dino should have correct name :: Award 1 points\n[Dino DB][Info] Running: Found dino should have the correct ID\n[Dino DB][Pass] Points 90 ==> 91 (1): Found dino should have the correct ID :: Award 1 points\n[Dino DB][Info] Running: Verifying correct DinoTree height\n[Dino DB][Pass] Points 91 ==> 92 (1): Verifying correct DinoTree height :: Award 1 points\n[Dino DB][Info] Running: Verifying correct DinoTree size\n[Dino DB][Pass] Points 92 ==> 93 (1): Verifying correct DinoTree size :: Award 1 points\n",
         "score": 5
      },
      {
         "max_score": 5,
         "name": "Memory Leaks",
         "output": "[Memory Leaks][Info] Setting fixed points possible to 11\n[Memory Leaks][Info] Running: Memory leaks\n[Memory Leaks][Pass] Points 0 ==> 1 (1): Memory leaks :: Award 1 points :: Did not catch exception\n[Memory Leaks][Info] Running: Checking for memory leaks or invalid reads/writes: No leaks detected\n[Memory Leaks][Pass] Points 1 ==> 11 (10): Checking for memory leaks or invalid reads/writes: No leaks detected :: Award 10 points :: TRUE\n",
         "score": 5
      }
   ]
}